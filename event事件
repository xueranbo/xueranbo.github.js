/*
  焦点：能够使浏览器区分用户输入对象，当一个元素有交点的时候，那么他就可以是用户的输入
  我们可以通过一些方式给元素设置焦点
  1  点击
  2  tab
  3  js

  不是所有的元素都能够接受焦点的，能够响应用户操作的元素

  onfocus:当用户获取到焦点的时候触发
  onblur:当元素失去焦点时触发
*/

var otext = document.getElementById('inp1');
var otext1 = document.getElementById('inp2');

otext.onfocus = function(){
    if(this.value == '请输入内容'){
        this.value = '';
    }
}
otext.onblur = function(){
    if(this.value == ''){
        this.value = '请输入内容';
    }
}

/*
  obj.focus() 方法  给指定的元素设置焦点
  obj.blur()  方法  取消指定元素的焦点
  obj.select()    选择指定的元素的内容

*/
otext.focus();

otext1.onclick = function(){
    otext.select();
}

/*
 event事件对象，当一个事件发生的时候和当前这个对象发生的这个事件有关的一些详细的信息都会被临时保存到一个指定的地方event对象，供我们在需要的调用。
 兼容
 ie/chrome event是一个内置全局对象；直接调用没有事件发生就是未定义
事件对象必须在一个事件发生后调用

标准下  事件对象是通过事件函数的第一个参数传入
如果一个函数是被事件调用的，那么这个函数定义的第一个参数就是事件对象
*/
document.onclick = function(){
    fn1();
}

function fn1(ev){
    //alert(ev)
    var ev = ev||event;

    /*for(var attr in ev){
      console.log(attr+'='+ev[attr])
    }*/
    //alert(ev.clientX +','+ ev.clientY)
}



//clientX[Y];当一个事件发生时候，鼠标到页面可视区的距离

//onmousemove:当鼠标在一个元素上面移动的时候触发
//触发的频率是间隔时间，在一个指定时间内（很短），如果鼠标的位置和上一次的位置发生变化，那么就会触发一次

/*
    键盘事件

	onkeydown：当键盘按键按下的时候触发
	onkeyup  ：当键盘按键抬起的时候触发

	event.keyCode: 数字类型  键盘按键的值  键值
	  ctrlKey,shiftKey,altKey 布尔值
	  如果当一个事件发生的时候，如果ctrl ||shift||alt 是按下的状态，返回true，否则返回false；
  */

document.onkeydown = function(ev){
    var ev = en||event;
    //alert(ev.keyCode);
}

document.onclick = function(ev){
    var ev= ev||event;
    //alert(ev.ctrlkey);
}

鼠标滚轮事件
   鼠标滚轮
         ie/chrome  :onmousewheel
	 
	 ff :  DOMMouseScroll  必须用addEventlistener 绑定
	 
	 if(odiv.addEventlistener){
	   odiv.addEventlistener('DOMMousescroll',fn,false)
	 }
	 
	 鼠标滚动的方向
	   ie/chrome  event.wheelDelta;  向下-120  向上120
	   ff  event.detail  上-3  下3
	   
	   return false 阻止的是 obj.on事件 = fn所触发的默认行为
	   addEventListener绑定的事件需要通过event下面的preventDefault（）；
	   

Event 对象
Event 对象代表事件的状态，比如事件在其中发生的元素、键盘按键的状态、鼠标的位置、鼠标按钮的状态。
事件通常与函数结合使用，函数不会在事件发生前被执行！
事件句柄　(Event Handlers)
HTML 4.0 的新特性之一是能够使 HTML 事件触发浏览器中的行为，比如当用户点击某个 HTML 元素时启动一段 JavaScript。下面是一个属性列表，可将之插入
HTML 标签以定义事件的行为。
属性	此事件发生在何时...
onabort	图像的加载被中断。
onblur	元素失去焦点。
onchange	域的内容被改变。
onclick	当用户点击某个对象时调用的事件句柄。
ondblclick	当用户双击某个对象时调用的事件句柄。
onerror	在加载文档或图像时发生错误。
onfocus	元素获得焦点。
onkeydown	某个键盘按键被按下。
onkeypress	某个键盘按键被按下并松开。
onkeyup	某个键盘按键被松开。
onload	一张页面或一幅图像完成加载。
onmousedown	鼠标按钮被按下。
onmousemove	鼠标被移动。
onmouseout	鼠标从某元素移开。
onmouseover	鼠标移到某元素之上。
onmouseup	鼠标按键被松开。
onreset	重置按钮被点击。
onresize	窗口或框架被重新调整大小。
onselect	文本被选中。
onsubmit	确认按钮被点击。
onunload	用户退出页面。
鼠标 / 键盘属性
属性	描述
altKey	返回当事件被触发时，"ALT" 是否被按下。
button	返回当事件被触发时，哪个鼠标按钮被点击。
clientX	返回当事件被触发时，鼠标指针的水平坐标。
clientY	返回当事件被触发时，鼠标指针的垂直坐标。
ctrlKey	返回当事件被触发时，"CTRL" 键是否被按下。
metaKey	返回当事件被触发时，"meta" 键是否被按下。
relatedTarget	返回与事件的目标节点相关的节点。
screenX	返回当某个事件被触发时，鼠标指针的水平坐标。
screenY	返回当某个事件被触发时，鼠标指针的垂直坐标。
shiftKey	返回当事件被触发时，"SHIFT" 键是否被按下。
IE 属性
除了上面的鼠标/事件属性，IE 浏览器还支持下面的属性：
属性	描述
cancelBubble	如果事件句柄想阻止事件传播到包容对象，必须把该属性设为 true。
fromElement	对于 mouseover 和 mouseout 事件，fromElement 引用移出鼠标的元素。
keyCode	对于 keypress 事件，该属性声明了被敲击的键生成的 Unicode 字符码。对于 keydown 和 keyup 事件，它指定了被敲击的键的虚拟键盘码。
虚拟键盘码可能和使用的键盘的布局相关。
offsetX,offsetY	发生事件的地点在事件源元素的坐标系统中的 x 坐标和 y 坐标。
returnValue	如果设置了该属性，它的值比事件句柄的返回值优先级高。把这个属性设置为 fasle，可以取消发生事件的源元素的默认动作。
srcElement	对于生成事件的 Window 对象、Document 对象或 Element 对象的引用。
toElement	对于 mouseover 和 mouseout 事件，该属性引用移入鼠标的元素。
x,y	事件发生的位置的 x 坐标和 y 坐标，它们相对于用CSS动态定位的最内层包容元素。
标准 Event 属性
下面列出了 2 级 DOM 事件标准定义的属性。
属性	描述
bubbles	返回布尔值，指示事件是否是起泡事件类型。
cancelable	返回布尔值，指示事件是否可拥可取消的默认动作。
currentTarget	返回其事件监听器触发该事件的元素。
eventPhase	返回事件传播的当前阶段。
target	返回触发此事件的元素（事件的目标节点）。
timeStamp	返回事件生成的日期和时间。
type	返回当前 Event 对象表示的事件的名称。
标准 Event 方法
下面列出了 2 级 DOM 事件标准定义的方法。IE 的事件模型不支持这些方法：
方法	描述
initEvent()	初始化新创建的 Event 对象的属性。
preventDefault()	通知浏览器不要执行与事件关联的默认动作。
stopPropagation()	不再派发事件
