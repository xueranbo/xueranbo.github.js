<script src="../vue.js"></script>
<script>
/*
 vue-cil脚手架
  vue提供的脚手架
    生成目录结构
	本地开发调试
	代码部署
	热加载
	单元测试
  什么是脚手架
  
  http://github.com/vuejs/vue-cli
  
  cn.vuejs.org
  
  响应式数据绑定
    当数据改变-》自动更新试图
	利用Object.definedProperty中的setter/getter代理数据，监控对数据的操作  不兼容ie8
	实列：10秒入门vue.js.html
  组件的视图组件
    ui页面映射为组件树
	划分为可维护性，可重用，可调式
	
	//element组件
	
	虚拟DOM
	 虚拟DOM（virtual DOM）
	   运行js速度是很快的，大量的操作DOM就会很慢。时常在更新数据后会重新渲染页面，这样造成在没有改变数据的地方也重新渲染了DOM节点，这样就造成了很大资源的浪费
	   利用在内存中生成与真实DOM与之对应的数据结构，这个在内存中生成的结构称之为虚拟DOM
	   当数据放生改变时，能够智能地计算出重新渲染组件的额最小代价并应用到DOM操作上
	   
	MVVM模式
	 MVVM模式
	  M Model数据模型
	  V view 视图模板
	  vm view-Model 视图模型
	  
	
	渐进式学习
	
	基础语法
	  vue实列         模板语法
	  计算属性         class和stylebangding
	  条件和列表渲染    事件处理器
	  表单控件绑定      组件 
	
	高级进阶 
	  vue插件编写       mixin混合
	  过渡效果          自定义指令
	  vue-router。路由系统的使用    vueX: 状态管理器
	
	构建工具
	  nodejs: javascript运行环境  webpack 模块管理和打包工具
	  vue-cli: 脚手架配置
	
	vue实列
	  每一个应用都是通过Vue这个构造函数创建根实列（root instance）启动
	    new Vue（选项对象）
	  
	  需要传入选项对象，对象包括挂载元素，数据，模板，方法等
	    
		el:挂载元素选择器  String|HtmlElement
		data:代理数据  Object|Function
		methods:定义方法  Object
	
	vue代理data数据
	  每个Vue实列都会代理其data对象里所有的属性，这些被代理的属性是响应的，新添加的属性不具备响应功能，改变后不会更新视图。
	vue实列自身属性和方法
	  暴露自身的属性和方法，已$开头，例如:$el  $data ...

    声明式渲染
	 声明式
	   只需要声明在哪里（where）做什么，而无需关心如何实现（how）
	 命令式
	   需要以具体代码表达在哪里（where）做什么（what），如何实现（how）
	   例子：求数组中的每一项的倍数
	     命令式
		   使用for循环拿出每一项，然后求知完成后，再放入另一组数据中
		 声明式
		   使用map方法 关注如何求值
	vue声明式渲染
	  初始化根实列，vue自动将数据绑定在模板上
	  
	指令
	  什么是指令
	    是一种特殊的自定义行间属性
		指令的职责就是当其表达式色值改变时相对地将某些行为应用到DOM上
		在vue中，指令以v-开头
		
		
       内置指令
	     v-bind 动态的绑定数据，简写为：
		 v-on 绑定事件监听器，简写为@
		 v-text 更新数据，会覆盖已有结构
		 v-html 可以解析数据的html结构
		 v-show 根据值的真假，切换元素的diaplay属性
		 v-if 根据值得真假，切换元素会被销毁，重建
		 v-else-if 多条件判断，为真则渲染
		 v-else 条件都不符合渲染
		 v-for 基于源数据多次渲染元素或模板块
		 v-model 在表单控件元素上创建双向数据绑定
		 v-pre 隐藏未编译过程
		 v-once 只渲染一次，随后数据更新不重新渲染
		 c-cloak 隐藏未编译的Mustache语法，css中设置[v-cloak]{display:none}
	
  html模板
	   基于DOM的模板，模板都是可可以解析的有效HTML
	 插值
	   文本：使用”Mustache“语法（双大括号）{{value}}
	       作用：替换实列上的属性值，当值改变时，插值内容处会自动更新
	   原生的html：双大括号输出的是文本，不会解析html
	   属性 ：使用v-bind进行绑定，可以响应变化
	   使用javascript表达式：写简单的表达式
  字符串模板
    template字符串
	  template选项对象的属性
	  模板将会替换挂载的元素，挂载元素事物内容都将被忽略
	  根节点只能有一个
	  将html结构写在一对script标签中设置type=“x-template”   
	  
  模板 -render函数
	  render函数
	    render选项对象的属性
		createElement(标签名，[数据对象]，子元素)；
		  子元素为文本或数组
		  
		  <div>
		    Hello World   
		  </div> 
	        ||
		render(h){
		  return h(
		    'div',
			{class:'message'},
			['Hello Word']
		  )
		}	
      数据对象属性
	   class:{},  绑定class，和v-bind:class 一样的 API
	   style:{},  绑定样式，和v-bind:style  一样的 API
	   attrs:{},  添加行间属性
	   domProps:{},  DOM元素属性
	   on:{},    绑定事件
	   
	   nativeOn:{},  监听原生事件
	   directives:{}, 自定义指令
	   scopedSlots:{},  slot作用域
	   slot:{},  定义slot名称
	   key:"key",  给元素添加唯一表示
	   ref:"ref"  引用信息
	
	v-for指令
	 根据一组数据的选项列表进行渲染
	 
	 语法
	   value  ，key in items
	   value , key of items
	 
	 变异方法
	   vue提供一组方法，对数组进行操作时候，会触发视图更新
	   
	   push()  pop()  shitf()  unshift()
	   splice()  sort()  reverse()
	   
	 事件处理器
	   v-on指令
	     用来监听DOM事件触发代码
		 语法
		   v-on:eventName="eventHandle"
		 指令简写： @
		 事件处理函数 写在methods中统一管理
		 事件对象
		   在事件处理函数中获取
		   内联事件处理函数执行，传入 事件对象  $event
      事件修饰符
	    事件处理函数只有纯粹的逻辑判断，不处理DOM事件的细节
		例如  阻止冒泡  取消默认行为  判断按键
		
        修饰符的位置  v-on:eventName.修饰符
		修饰符
		 .stop  .prevent  .capture  .self  .once
		按键修饰符
		  .enter  .tab  .delete  .esc
		  .space  .up  .down  .left  .right 
		  .ctrl  .alt  .shift  .meta
		  .键值
	
      动态class
	    class也为元素的属性，可以使用v-bind;class
		语法：
		  :class = "{className:表达式}"
		           表达式值味true添加className
				   表达式值为false不添加className
		  :class = "{className,classname}"
	  
	  条件渲染
	    v-show指令
		  根据表达式的值，用来显示/隐藏元素
		  语法：
		    v-show=“表达式”
		  元素会被渲染在页面中，只根据表达式的值进行css切换

      自定义指令
	    除了vue内置的指令，可以自己设置指令
		选项对象的directives属性
		  {
		     directives:{}
		  }
		 钩子函数
		   update被绑定元素所在的模板更新时调用
		   钩子函数中参数
		     el: 指令绑定的元素，可以用来直接操作DOM
			 binding: 一个对象
			   value ：  指令的绑定值
	  
	  计算数据
	   为什么要用计算属性
	      模板是为了描述视图的结构。模板中放入太多逻辑，导致模板过重且难以维护。
		  在计算一个属性时，Vue.js更新它的依赖列表并缓存结果，只有当其中一个依赖发生变化，缓存的结果才无效
		语法
		  在选项对象中
		    {
			   ...
			   computed:{}
			}
	  

*/
</script>
</head>

<body>
<!--模板-->
<div id="demo">
  <input type="text" v-model="message" />
  <p>{{message}}</p>
  <!--{{message}}-->
</div>
<script>
  // 数据
  let data = {
    message:"hello,vue!"
  }
  // Vm实列
  var vm = new Vue({
    el:"#demo",//挂载元素
	data: data
  })
  
  //console.log(document)
</script>
</body>
