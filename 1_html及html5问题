

<!doctype html>
   //  html4 前声明的一大串东西 就是给w3c验证器看的 触发浏览器的标准模式下的兼容问题 大小写不敏感  有三种模式  
   严格模式 过度模式 框架模式  但是 在浏览器解析时即使使用了框架模式  页面结构按照w3c写  浏览器的容错性还可以
   正常解析  所以到h5后直接省掉一大串的东西
   
   /*
     http协议或者是TCP协议
        HTTP - 超文本传输协议
          HTTP 负责 web 服务器与 web 浏览器之间的通信。
          HTTP 用于从 web 客户端（浏览器）向 web 服务器发送请求，并从 web 服务器向 web 客户端返回内容（网页）。
     
        HTTPS - 安全的 HTTP
          HTTPS 负责在 web 服务器和 web 浏览器之间的安全通信。
          作为有代表性的应用，HTTPS 会用于处理信用卡交易和其他的敏感数据。
  
   */
   
<html>
  <head>
    <meta charset="UTF-8" />  保存时需要和保存时的编码一致
     
      /*
      meta标签
        name属性主要用于网页的描述  对应的属性值是content  content里面的内容是对name属性的具体描述
         宽度设置  name="viewport"  content="width=device, initial-scale=1"
         关键字    name="keywords" content="关键字“
         网站内容的描述  name="description" content="描述的文字”
         搜索引擎的爬虫方式 name="robots"  content="none"
                 1.none : 搜索引擎将忽略此网页，等价于noindex，nofollow。
                 2.noindex : 搜索引擎不索引此网页。
                 3.nofollow: 搜索引擎不继续通过此网页的链接索引搜索其它的网页。
                 4.all : 搜索引擎将索引此网页与继续通过此网页的链接索引，等价于index，follow。
                 5.index : 搜索引擎索引此网页。
                 6.follow : 搜索引擎继续通过此网页的链接索引搜索其它的网页.
         用于标注作者 name=”author" content="作者的名字"
         网页制作的软件  name="generator" content="软件名字“
         标注版权的信息  name="copyright" content="版权名”   代表这个网页归个人版权所有
         搜索引擎爬虫的重防时间  name="revisit-after" content="7 days"  
         双核浏览器的渲染模式  name="renderer" content="webkit"  默认webkit内核浏览器
                             name="renderer" content="ie-comp"  默认ie兼容模式
                             name="renderer" content="ie-stand" 默认ie标准模式
     		http-equiv属性  相当于http文件头的作用  content进一步的描述
          设定网页的字符集  http-equiv="content-type" content="text/html; charset=utf-8"  旧版的html设置
                          charset="utf-8"  h5模式下
          浏览器采用何种版本渲染当前页面  
            http-equiv="X-UA-Compatible"  content="IE=edge, chrome=1"  指定使用ie和chrome的最新版本渲染当前页面
          指定请求和响应的缓存机制
              http-equiv="cache-control" content="no-cache"
                 no-cache: 先发送请求，与服务器确认该资源是否被更改，如果未被更改，则使用缓存。
                 no-store: 不允许缓存，每次都要去服务器上，下载完整的响应。（安全措施）
                 public : 缓存所有响应，但并非必须。因为max-age也可以做到相同效果
                 private : 只为单个用户缓存，因此不允许任何中继进行缓存。（比如说CDN就不允许缓存private的响应）
                 maxage : 表示当前请求开始，该响应在多久内能被缓存和重用，而不去服务器重新请求。例如：max-age=60表示响应可
                 以再缓存和重用 60 秒。
                 禁止百度自动转码  http-equiv="Cache-Control" content="no-siteapp"
          设定网页的到期时间  http-equiv="expires" content="Sunday 26 October 2016 01:00 GMT"
          网页将在设定的时间内，自动刷新并调向设定的网址 
               http-equiv="refresh" content="2; URL="网址"
          如果网页过期,那么这个网页存在本地的cookies也会被自动删除
               http-equiv="Set-Cookie" content="name, date"
               http-equiv="Set-Cookie" content="User=name;path=/;expires=内容"

  
  */
    
    <title>标题 - title</title>
    
    <style></style>
    <script>
      window.onload = function(){
         // 文档加载完在加载js
      }
    </script>
  </head>
  
  <body>
    内容 -content
    
    标记，标签 <html>
    标签对  <html></html>
    单标签  <meta /> <link /> <img />  <br />换行
       
       标签对
         div  
         <div style="width:200px; height:200px">aaa</div> 行间样式
         <a href="#"></a> 超链接
           a标签四个伪类
             a:hove{ color:red; } 鼠标移入（悬停）
             a:link{color:block}  未访问过的a链接的初始颜色
             a:visited{color: green} 访问过后的a链接的颜色
             a:active{color: pink} 鼠标按下不动的时候的颜色
             link  visited  active
             顺序 L V H A 
             
             包含选择器
         
         <span></span>
            区分样式
            
          <header>页面头部  也用于板块的头部</header> 
          
          <nav></nav>  导航 包含链接的一个列表
             <nav><a href="#">链接</a></nav>
          
          <section>页面的版块</section>
          
          <article>用来在页面中表示一套结构完整且独立的内容部分</article>
          
          <aside>元素标签可以包含当前页面或主要内容相关的引用，侧边栏，广告 nav元素组，以及其他类似的有别与主要内
          容的部分</aside>
          
          <time>用来表现时间或日期</time>
             <p>我们在每天早上<time>9：00</time>营业</p>
             <p><time datetime="2020-02-14">情人节</time>有个约会</p>
          h1 ~ h6 标题标签  h1 32px, h2 24px, h3 18.72px, h4 16px, h5 13.28px, h6 12px;
          <p>一段文字</p>
          <stroung>强调（粗体）</strong>
          <em>强调(斜体)</em>
          <ul>无序列表</ul>
          <ol>有序列表</ol>
          <li>列表项<li>
          <dl>定义列表</dl>
          <dt>定义列表的标题</dt>
          <dd>定义列表项</dd>
          <mark>标记</mark>
          
          特殊的img
           img单标签
             src（绝对路径/相对路径）
             
             相对地址 ： 是相对于当前文件的地址 如  src="img/2.png"
             绝对地址 ： 图片的路径
             
           img特征
             支持宽高
             只设置宽度或高度等比缩放
             img空隙问题
           <img src="图片地址" alt="图片未加载进来的显示的文字" title="鼠标移入时提示的文字" />
          
          表格元素 默认样式重置
            表格标签
              table 表格
              thead  表格头
              tbody  表格主体
              tr  表格行
              th  元素定义表头
              td  元素定义表格单元
              
              <table border="1">
                <thead>
                  <tr>
                    <th>星期一</th>
                    <th>星期二</th>
                    <th>星期三</th>
                    <th>星期四</th>
                    <th>星期五</th>                  
                  </tr>
                </thead>
                <tbody>
                  <tr>
                    <td>html<td>
                    <td>css<td>
                    <td>js<td>
                    <td>php<td>
                    <td>jq<td>
                  </tr>
                  <tr>
                    <td>html<td>
                    <td>css<td>
                    <td>js<td>
                    <td>php<td>
                    <td>jq<td>
                  </tr>
                  <tr>
                    <td>html<td>
                    <td>css<td>
                    <td>js<td>
                    <td>php<td>
                    <td>jq<td>
                  </tr>
                </tbody>
              </table>
              
          表格样式重置
            table{border-collapse: collapse;}单元格间隙合并
            th,td{padding: 0;} 重置单元格默认格式填充
            
         单元格合并
           colspan  属性规定单元格可横跨的列数
           <td colspan="2"></td>
           
           rowspan  属性规定单元格可横跨的行数
           <td rowspan="2"></td>
             
          
          表单元素
            form  表单
            <input type="" name="" vlaue="" />
              text  文本框
              password 密码
              radio 单选  需要name属性相同的一组
              checkbox 复选   值 checked
              submit 提交
              reset 重置
              button 按钮
              image 图片
              file 上传
              hidden 隐藏
              
              <form action="提交地址">
                <input type="类型" name="属性" value="值" />
              </form>
          
          lable 标签为input元素定义标注
            <input type="checkbox" name="" id="a" />
            <lable for="a"></lable>
            
            <lable for="password">密码：</lable>
            <input type="text" name="" vlaue="" id="password" />
            
          checked 在页面加载时默认选定的input元素
            <input type="checkbox" name="" checked />
            
          disabled 属性规定应该禁用input元素
            <input type="checkbox" name="" disabled="disabled" />
          
          select / option  下拉选项
            对高度的支持不兼容;
          
          textarea  文本域
            各个浏览器的默认滚动条显示不兼容
            css3新增 resize 调整尺寸属性
          
          
          <footer>页脚 页面底部或者板块的底部</footer>
                 
语义化标签的由来
http://devfiles.myopera.com/articles/572/idlist-url.htm

<nav><a href="#"></a></nav> 用于导航的标签 包含链接的一部分

<section></section>页面上的板块

<article></article> 用来在页面中表示一套结构完整且独立的内容部分

<aside></aside> 元素标签可以包含与当前页面或主要内容相关的引用，侧边栏，广告，nav元素组，以及其他类似色有别于主要内容的部分
  aside的内容应该与article的内容相关。
  被包含的内容以是与当前文章有关的引用，词汇列表等
  在article之外使用，作为页面或站点全局的附属信息部分，最典型的形式是侧边栏sidebar，其中的内容可以是友情链接，附属导航或广告单元等。

<figure></firure> 用于对元素进行组合。一般用于图片或视频

<figcaption></figcaption>figure的子元素 用于对figure的内容 进行说明

<figure>
  <img src="地址" />  注意没有alt
  <figcaption>妙味课堂</figcaption>
</firure>

<datalist></datalist>选项列表。 与input元素配合使用，用来定义input可能的值
 <input type="text" list="valList" />
 <datalist id="valList">
   <option value="javascript">javascript</option>
   <option value="html">html</option>
   <option value="css">css</option>
 <datalist>
 
 <details></datails>用于描述文档或文档某个部分的细节
   该元素用于摘录引用等 应该与页面的主要内容区分开其他内容
   open  属性默认展开
 
 <summary></summary> details 元素的标题
 <details>
   <summary>妙味课堂</summary>
   <p>国内的</p>
 </details>
 
 <dialog></dialog>  定义一段对话
 
 <dialog>
   <dt>老师</dt>
   <dd>2+2等于？</dd>
   <dt>学生</dt>
   <dd>4</dd>
   <dt>老师</dt>
   <dd>答对了！</dd>
 </dialog>
 
 <address></address> 定义文章 或页面的详细联系信息
 <mark></mark> 需要标记的字或段子
 <keygen> 给表单添加一个公钥
   <form action="提交地址"> 
     用户： <input type="text" name="user_name" />
     公钥：<keygen name="security" />
          <input type="submit" />
   <form>
 
 <progress></progress>  定义进度条
   <progress max="100" value="76">
     <span>76</span>%
   </progress>
 
 新增标签的兼容  
   1 引入js插件
   2 doucment.createElement('标签名')
   
  
 forms
   新的输入型控件
    email  电子邮箱文本框 跟普通的没有什么区别
       当输入的不是邮箱的时候，验证通不过
       移动端的键盘有变化
    
    tel 电话号码
    url 网页的url
    search 搜索引擎
       chrome下输入文字后或多出一个关闭的X
    range 特定范围内的数值选择器
      min  max  step(步数) 
    number  只能包含数字的输入框
    color  颜色选择器
    datetime 显示完整的日期
    datetime-local  显示完整日期，不含时区
    time  显示日期  不含时区
    date  显示日期
    week  显示周
    month  显示月
    
    html5语义化标签在ie6-8下，我们用js创建出来之后，他们不会有任何默认的样式的甚至是display，所以早样式表里 要对这些标签定义一下
    它默认的display
 
 新的表单特性和函数
   placeholder  输入框提示信息
   autocomplate 是否保存用户输入值
     默认 on  关闭提示选择off
   autofocus  指定表单获取输入焦点
   list和datalist  为输入框构造一个选择列表
     list值为datalist 标签的id
   required 此项必填 不能为空
   pattern  正则验证 pattern=”\d{1,5}“
   formaction  在submit里定义提交地址 保存至草稿箱  chrome不兼容
    
 表单验证
   validity对象，通过下面的valid 可以查看验证是否通过，如果八种验证都通过返回true一种验证失败返回false
      oText.addEventListener('invalid',fn1,false);
      ev.preventDefault() 
      valueMissing  输入值为空时
      typeMismatch  控件值与预期类型不匹配
      patternMismatch  输入值不满足pattern正则
      tooLong  超过maxLength最大限制
      rangeUnderflow 验证range最小值
      rangeOverflow  验证range最大值
      stepMismatch  验证range的当前值是否符合min ， max以及step的规则
      customError 不符合自定义验证
        setCustomValidity(); 自定义验证
 
 表单验证
   Invalid 事件 验证反馈
   input.addEventListener('invalid', fn, false)
       阻止默认验证  ev.preventDefault()
   formnovaliddate属性  关闭验证
 
 html5新特性的浏览器支持情况
   http://www.caniuse.com/#index
 
 新的选择器
   querySelector()  只能选择一个元素
   querySelectorall()  选择一组元素
   getElementsByClassName();
   
 获取class列表属性
   classList
     length   class的长度
     add()  添加class方法
     remove()  删除class方法
     toggle()  切换class方法

 json的新方法
   parse() 把字符串转成json
      字符串中的属性要严格加上引号
   stringify()  把json转成字符串
      会自动的把双引号加上
   新方法与eval的区别
     
     eval可以解析任何字符串
     JSON.parse  只能解析JSON形式的字符串  安全性高
     
   新方法的应用
     深度克隆对象
     
     var a = {name: "hello"}
     var b = a;
     b.name = 'hi';
     alert(a.name)  // hi
     
     var a = {name: "hello"}  
     for(var attr in a){  //浅拷贝
       b[attr] = a[atr];
     }
     b.name = 'hi';
     alert(a.name); //hello
     
     var a = {name: "hello"}
     var str = JSON.stringify(a);
     var b = JSON.parse(str);
     b.name = 'hi';
     alert(a.name); //hello
     
   
   如何与其他浏览器的兼容
      http://www.json.org/去下载json2.js 
 
 data自定义数据
   dataset  
      data-name： dataset.name
      data-name-first: dataset.nameFirst
      
   data数据早jqery mobile中有着重要的作用
 
 延迟加载js
   js的加载会影响后面的内容加载
      很多浏览器都采用了并行加载js 但还是会影响其他内容
   html5的defer和async
     defer  延时加载，会按顺序执行，在onload执行前被触发 外链的script标签才会有用
        <script src="a.js" defer="defer"></script>
        <script src="b.js"></script>
        <script src="c.js"></script>
            先加载b c 两个js 在加载a
           
     async  异步加载，加载完就触发，有顺序问题
        <script src="a.js" async="async"></script>
        <script src="a.js" async="async"></script>
        <script src="a.js" async="async"></script>
        <img src="">
          四个文件同时加载
同步加载、异步加载、延迟加载 的区别
1 同步加载
　　平常默认用的都是同步加载。如：<script src="http://yourdomain.com/script.js"></script> 
　　同步模式又称阻塞模式，会阻止浏览器的后续处理，停止了后续的文件的解析，执行，如图像的渲染。流览器之所以会采用同步模式，是因为
  加载的js文件中有对dom的操作，重定向，输出document等默认行为，所以同步才是最安全的。通常会把要加载的js放到body结束标签之前，
  使得js可在页面最后加载，尽量减少阻塞页面的渲染。这样可以先让页面显示出来

2 异步加载

(function() { 
var s = document.createElement('script'); 
s.type = 'text/javascript'; 
s.async = true; 
s.src = 'http://yourdomain.com/script.js'; 
var x = document.getElementsByTagName('script')[0]; 
 x.parentNode.insertBefore(s, x); 
})();

异步加载也叫非阻塞模式加载，浏览器在下载js的同时，同时还会执行后续的页面处理。
在script标签内，用js创建一个script元素并插入到document中，这种就是异步加载js文件了。

也可以通过onreadystatechange   和 onload 来监听js什么时候加载完

同步加载流程是瀑布模型，异步加载流程是并发模型。

3 延迟加载（lazy loading）
前面解决了异步加载（async loading）问题，再谈谈什么是延迟加载。
延迟加载：有些 js 代码并不是页面初始化的时候就立刻需要的，而稍后的某些情况才需要的。延迟加载就是一开始并不加载这些暂时不用的js，
而是在需要的时候或稍后再通过js 的控制来异步加载。
也就是将 js 切分成许多模块，页面初始化时只加载需要立即执行的 js ，然后其它 js 的加载延迟到第一次需要用到的时候再加载。
特别是页面有大量不同的模块组成，很多可能暂时不用或根本就没用到。
就像图片的延迟加载，在图片出现在可视区域内时（在滚动条下拉）才加载显示图片

4 预加载

预加载是一种浏览器机制，使用浏览器空闲时间来预先下载/加载用户接下来很可能会浏览的页面/资源，当用户访问某个预加载的链接时，如果从缓存
命中,页面就得以快速呈现   
 
DOM文档加载的步骤为

解析HTML结构。
加载外部脚本和样式表文件。
解析并执行脚本代码。
DOM树构建完成。//DOMContentLoaded
加载图片等外部文件。
页面加载完毕。//load

在第4步，会触发DOMContentLoaded事件。在第6步，触发load事件。

        
   Labjs库   
 
历史管理
   触发历史管理
      1 通过跳转页面
      2 hash
      3 pushState
      
    onhashchange  改变hash值管理页面
    
    window.location.hash = 一个随机数
    
    window.onhashchange = function(){
      odiv.innerHTML = json[window.location.hash.substring(1)];
    }
    
    window.location  浏览器地址信息
    widow.location.href  浏览地址
    window.location.search  url ?号后面的内容
    window.location.hash  url #号后面的内容
    
    history
       服务器下运行
       pushState 三个参数  数据 标题(没实现) 地址(可选)
       onpopstate事件  读取数据  event.state
       注意网址是虚假的，需在服务器指定对应页面，不然刷新找不到页面
       
       history.pushState(arr,'',arr) 存数据
       
       window.onpopstate = function(ev){
          odiv.innerHTML = ev.state
       }
 
 html5新特性的浏览器支持情况
   http://www.caniuse.com/#index
 
 拖放
   ondraggble
     设置为true，元素就可以拖拽了
 
 拖放事件
   拖拽元素事件  事件对象为被拖拽元素
     ondragstart  拖拽前触发
     ondrag  拖拽前，拖拽结束之间，连续触发
     ondragend 拖拽结束触发
     
   目标元素事件  事件对象为目标元素
     ondragenter  进入目标元素触发  相当于mouseover
     ondragover  进入目标离开目标之间，连续触发
     ondragleave 离开元素触发，相当于mouseout
     ondrop  在，目标元素上释放鼠标触发
     
      要想触发drop事件，就必须在dragover当中阻止默认事件
        ev.preventDefault();
 
   拖放事件
     事件的执行顺序： drop不触发的时候
       dragstart -> drag -> dragenter -> dragover -> dragleave -> dragend
     事件的执行顺序 drop触发的时候（drop的时候阻止默认时间）
        dragstart -> drag -> dragenter -> dragover -> drop -> dragend
     
     不能释放的光标和释放的光标不一样
 
    拖放事件
     解决火狐下的问题
       必须设置dataTransfer 对象的setDate方法才可以拖拽除图片外的其他标签
       
     dataTransfer对象
       setData()  设置数据key和value  必须是字符串
       getData()  获取数据，根据key值，获取对应的value

      ev.dataTransfer.setData('name', 'hello')
      ev.dataTransfer.getData('name')
     
     dataTransfer 对象
       effectAllowed
         effectAllowed  设置光标样式(none, copy,copyLink,copyMove, link, linkMove, move, all 和 uninitialized)
         
       setDragImage  拖拽的阴影
           三个参数  指定的元素  坐标x  坐标y
           
       files
          获取外部拖拽的文件，返回一个filesList列表
          filesList下有个type属性，返回文件类型
          
          fs = ev.dataTransfer.files
          fs[0].type
         
      FileReader  读取文件信息
         readAsDataURL
            参数为要读取的文件对象，将文件读取为DataUrl
         onload
            当读取文件成功完成的时候触发此事件
            this.result  来获取读取的文件数据， 如果是图片，将返回base64格式的图片数据
            
         var fd = new FileReader();
         fd.readAsDataURL(fs[0])
         fd.onload = function(){
           console.log(this.result)
         } 




         
         
       
    <script>
      //代码
    </script>
  </body>
</html>
