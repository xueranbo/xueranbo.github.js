

<!doctype html>
   //  html4 前声明的一大串东西 就是给w3c验证器看的 触发浏览器的标准模式下的兼容问题 大小写不敏感  有三种模式  
   严格模式 过度模式 框架模式  但是 在浏览器解析时即使使用了框架模式  页面结构按照w3c写  浏览器的容错性还可以
   正常解析  所以到h5后直接省掉一大串的东西
   
   /*
     http协议或者是TCP协议
        HTTP - 超文本传输协议
          HTTP 负责 web 服务器与 web 浏览器之间的通信。
          HTTP 用于从 web 客户端（浏览器）向 web 服务器发送请求，并从 web 服务器向 web 客户端返回内容（网页）。
     
        HTTPS - 安全的 HTTP
          HTTPS 负责在 web 服务器和 web 浏览器之间的安全通信。
          作为有代表性的应用，HTTPS 会用于处理信用卡交易和其他的敏感数据。
  
   */
   
<html>
  <head>
    <meta charset="UTF-8" />  保存时需要和保存时的编码一致
     
      /*
      meta标签
        name属性主要用于网页的描述  对应的属性值是content  content里面的内容是对name属性的具体描述
         宽度设置  name="viewport"  content="width=device, initial-scale=1"
         关键字    name="keywords" content="关键字“
         网站内容的描述  name="description" content="描述的文字”
         搜索引擎的爬虫方式 name="robots"  content="none"
                 1.none : 搜索引擎将忽略此网页，等价于noindex，nofollow。
                 2.noindex : 搜索引擎不索引此网页。
                 3.nofollow: 搜索引擎不继续通过此网页的链接索引搜索其它的网页。
                 4.all : 搜索引擎将索引此网页与继续通过此网页的链接索引，等价于index，follow。
                 5.index : 搜索引擎索引此网页。
                 6.follow : 搜索引擎继续通过此网页的链接索引搜索其它的网页.
         用于标注作者 name=”author" content="作者的名字"
         网页制作的软件  name="generator" content="软件名字“
         标注版权的信息  name="copyright" content="版权名”   代表这个网页归个人版权所有
         搜索引擎爬虫的重防时间  name="revisit-after" content="7 days"  
         双核浏览器的渲染模式  name="renderer" content="webkit"  默认webkit内核浏览器
                             name="renderer" content="ie-comp"  默认ie兼容模式
                             name="renderer" content="ie-stand" 默认ie标准模式
     		http-equiv属性  相当于http文件头的作用  content进一步的描述
          设定网页的字符集  http-equiv="content-type" content="text/html; charset=utf-8"  旧版的html设置
                          charset="utf-8"  h5模式下
          浏览器采用何种版本渲染当前页面  
            http-equiv="X-UA-Compatible"  content="IE=edge, chrome=1"  指定使用ie和chrome的最新版本渲染当前页面
          指定请求和响应的缓存机制
              http-equiv="cache-control" content="no-cache"
                 no-cache: 先发送请求，与服务器确认该资源是否被更改，如果未被更改，则使用缓存。
                 no-store: 不允许缓存，每次都要去服务器上，下载完整的响应。（安全措施）
                 public : 缓存所有响应，但并非必须。因为max-age也可以做到相同效果
                 private : 只为单个用户缓存，因此不允许任何中继进行缓存。（比如说CDN就不允许缓存private的响应）
                 maxage : 表示当前请求开始，该响应在多久内能被缓存和重用，而不去服务器重新请求。例如：max-age=60表示响应可
                 以再缓存和重用 60 秒。
                 禁止百度自动转码  http-equiv="Cache-Control" content="no-siteapp"
          设定网页的到期时间  http-equiv="expires" content="Sunday 26 October 2016 01:00 GMT"
          网页将在设定的时间内，自动刷新并调向设定的网址 
               http-equiv="refresh" content="2; URL="网址"
          如果网页过期,那么这个网页存在本地的cookies也会被自动删除
               http-equiv="Set-Cookie" content="name, date"
               http-equiv="Set-Cookie" content="User=name;path=/;expires=内容"

  
  */
    
    <title>标题 - title</title>
    
    <style></style>
    <script>
      window.onload = function(){
         // 文档加载完在加载js
      }
    </script>
  </head>
  
  <body>
    内容 -content
    
    标记，标签 <html>
    标签对  <html></html>
    单标签  <meta /> <link /> <img />  <br />换行
       
       标签对
         div  
         <div style="width:200px; height:200px">aaa</div> 行间样式
         <a href="#"></a> 超链接
           a标签四个伪类
             a:hove{ color:red; } 鼠标移入（悬停）
             a:link{color:block}  未访问过的a链接的初始颜色
             a:visited{color: green} 访问过后的a链接的颜色
             a:active{color: pink} 鼠标按下不动的时候的颜色
             link  visited  active
             顺序 L V H A 
             
             包含选择器
         
         <span></span>
            区分样式
            
          <header>页面头部  也用于板块的头部</header> 
          
          <nav></nav>  导航 包含链接的一个列表
             <nav><a href="#">链接</a></nav>
          
          <section>页面的版块</section>
          
          <article>用来在页面中表示一套结构完整且独立的内容部分</article>
          
          <aside>元素标签可以包含当前页面或主要内容相关的引用，侧边栏，广告 nav元素组，以及其他类似的有别与主要内
          容的部分</aside>
          
          <time>用来表现时间或日期</time>
             <p>我们在每天早上<time>9：00</time>营业</p>
             <p><time datetime="2020-02-14">情人节</time>有个约会</p>
          h1 ~ h6 标题标签  h1 32px, h2 24px, h3 18.72px, h4 16px, h5 13.28px, h6 12px;
          <p>一段文字</p>
          <stroung>强调（粗体）</strong>
          <em>强调(斜体)</em>
          <ul>无序列表</ul>
          <ol>有序列表</ol>
          <li>列表项<li>
          <dl>定义列表</dl>
          <dt>定义列表的标题</dt>
          <dd>定义列表项</dd>
          <mark>标记</mark>
          
          特殊的img
           img单标签
             src（绝对路径/相对路径）
             
             相对地址 ： 是相对于当前文件的地址 如  src="img/2.png"
             绝对地址 ： 图片的路径
             
           img特征
             支持宽高
             只设置宽度或高度等比缩放
             img空隙问题
           <img src="图片地址" alt="图片未加载进来的显示的文字" title="鼠标移入时提示的文字" />
          
          表格元素 默认样式重置
            表格标签
              table 表格
              thead  表格头
              tbody  表格主体
              tr  表格行
              th  元素定义表头
              td  元素定义表格单元
              
              <table border="1">
                <thead>
                  <tr>
                    <th>星期一</th>
                    <th>星期二</th>
                    <th>星期三</th>
                    <th>星期四</th>
                    <th>星期五</th>                  
                  </tr>
                </thead>
                <tbody>
                  <tr>
                    <td>html<td>
                    <td>css<td>
                    <td>js<td>
                    <td>php<td>
                    <td>jq<td>
                  </tr>
                  <tr>
                    <td>html<td>
                    <td>css<td>
                    <td>js<td>
                    <td>php<td>
                    <td>jq<td>
                  </tr>
                  <tr>
                    <td>html<td>
                    <td>css<td>
                    <td>js<td>
                    <td>php<td>
                    <td>jq<td>
                  </tr>
                </tbody>
              </table>
              
          表格样式重置
            table{border-collapse: collapse;}单元格间隙合并
            th,td{padding: 0;} 重置单元格默认格式填充
            
         单元格合并
           colspan  属性规定单元格可横跨的列数
           <td colspan="2"></td>
           
           rowspan  属性规定单元格可横跨的行数
           <td rowspan="2"></td>
             
          
          表单元素
            form  表单
            <input type="" name="" vlaue="" />
              text  文本框
              password 密码
              radio 单选  需要name属性相同的一组
              checkbox 复选   值 checked
              submit 提交
              reset 重置
              button 按钮
              image 图片
              file 上传
              hidden 隐藏
              
              <form action="提交地址">
                <input type="类型" name="属性" value="值" />
              </form>
          
          lable 标签为input元素定义标注
            <input type="checkbox" name="" id="a" />
            <lable for="a"></lable>
            
            <lable for="password">密码：</lable>
            <input type="text" name="" vlaue="" id="password" />
            
          checked 在页面加载时默认选定的input元素
            <input type="checkbox" name="" checked />
            
          disabled 属性规定应该禁用input元素
            <input type="checkbox" name="" disabled="disabled" />
          
          select / option  下拉选项
            对高度的支持不兼容;
          
          textarea  文本域
            各个浏览器的默认滚动条显示不兼容
            css3新增 resize 调整尺寸属性
          
          
          <footer>页脚 页面底部或者板块的底部</footer>
                 
语义化标签的由来
http://devfiles.myopera.com/articles/572/idlist-url.htm

<nav><a href="#"></a></nav> 用于导航的标签 包含链接的一部分

<section></section>页面上的板块

<article></article> 用来在页面中表示一套结构完整且独立的内容部分

<aside></aside> 元素标签可以包含与当前页面或主要内容相关的引用，侧边栏，广告，nav元素组，以及其他类似色有别于主要内容的部分
  aside的内容应该与article的内容相关。
  被包含的内容以是与当前文章有关的引用，词汇列表等
  在article之外使用，作为页面或站点全局的附属信息部分，最典型的形式是侧边栏sidebar，其中的内容可以是友情链接，附属导航或广告单元等。

<figure></firure> 用于对元素进行组合。一般用于图片或视频

<figcaption></figcaption>figure的子元素 用于对figure的内容 进行说明

<figure>
  <img src="地址" />  注意没有alt
  <figcaption>妙味课堂</figcaption>
</firure>

<datalist></datalist>选项列表。 与input元素配合使用，用来定义input可能的值
 <input type="text" list="valList" />
 <datalist id="valList">
   <option value="javascript">javascript</option>
   <option value="html">html</option>
   <option value="css">css</option>
 <datalist>
 
 <details></datails>用于描述文档或文档某个部分的细节
   该元素用于摘录引用等 应该与页面的主要内容区分开其他内容
   open  属性默认展开
 
 <summary></summary> details 元素的标题
 <details>
   <summary>妙味课堂</summary>
   <p>国内的</p>
 </details>
 
 <dialog></dialog>  定义一段对话
 
 <dialog>
   <dt>老师</dt>
   <dd>2+2等于？</dd>
   <dt>学生</dt>
   <dd>4</dd>
   <dt>老师</dt>
   <dd>答对了！</dd>
 </dialog>
 
 <address></address> 定义文章 或页面的详细联系信息
 <mark></mark> 需要标记的字或段子
 <keygen> 给表单添加一个公钥
   <form action="提交地址"> 
     用户： <input type="text" name="user_name" />
     公钥：<keygen name="security" />
          <input type="submit" />
   <form>
 
 <progress></progress>  定义进度条
   <progress max="100" value="76">
     <span>76</span>%
   </progress>
 
 新增标签的兼容  
   1 引入js插件
   2 doucment.createElement('标签名')
   
  
 forms
   新的输入型控件
    email  电子邮箱文本框 跟普通的没有什么区别
       当输入的不是邮箱的时候，验证通不过
       移动端的键盘有变化
    
    tel 电话号码
    url 网页的url
    search 搜索引擎
       chrome下输入文字后或多出一个关闭的X
    range 特定范围内的数值选择器
      min  max  step(步数) 
    number  只能包含数字的输入框
    color  颜色选择器
    datetime 显示完整的日期
    datetime-local  显示完整日期，不含时区
    time  显示日期  不含时区
    date  显示日期
    week  显示周
    month  显示月
    
    html5语义化标签在ie6-8下，我们用js创建出来之后，他们不会有任何默认的样式的甚至是display，所以早样式表里 要对这些标签定义一下
    它默认的display
 
 新的表单特性和函数
   placeholder  输入框提示信息
   autocomplate 是否保存用户输入值
     默认 on  关闭提示选择off
   autofocus  指定表单获取输入焦点
   list和datalist  为输入框构造一个选择列表
     list值为datalist 标签的id
   required 此项必填 不能为空
   pattern  正则验证 pattern=”\d{1,5}“
   formaction  在submit里定义提交地址 保存至草稿箱  chrome不兼容
    
 表单验证
   validity对象，通过下面的valid 可以查看验证是否通过，如果八种验证都通过返回true一种验证失败返回false
      oText.addEventListener('invalid',fn1,false);
      ev.preventDefault() 
      valueMissing  输入值为空时
      typeMismatch  控件值与预期类型不匹配
      patternMismatch  输入值不满足pattern正则
      tooLong  超过maxLength最大限制
      rangeUnderflow 验证range最小值
      rangeOverflow  验证range最大值
      stepMismatch  验证range的当前值是否符合min ， max以及step的规则
      customError 不符合自定义验证
        setCustomValidity(); 自定义验证
 
 表单验证
   Invalid 事件 验证反馈
   input.addEventListener('invalid', fn, false)
       阻止默认验证  ev.preventDefault()
   formnovaliddate属性  关闭验证
 
 html5新特性的浏览器支持情况
   http://www.caniuse.com/#index
 
 新的选择器
   querySelector()  只能选择一个元素
   querySelectorall()  选择一组元素
   getElementsByClassName();
   
 获取class列表属性
   classList
     length   class的长度
     add()  添加class方法
     remove()  删除class方法
     toggle()  切换class方法

 json的新方法
   parse() 把字符串转成json
      字符串中的属性要严格加上引号
   stringify()  把json转成字符串
      会自动的把双引号加上
   新方法与eval的区别
     
     eval可以解析任何字符串
     JSON.parse  只能解析JSON形式的字符串  安全性高
     
   新方法的应用
     深度克隆对象
     
     var a = {name: "hello"}
     var b = a;
     b.name = 'hi';
     alert(a.name)  // hi
     
     var a = {name: "hello"}  
     for(var attr in a){  //浅拷贝
       b[attr] = a[atr];
     }
     b.name = 'hi';
     alert(a.name); //hello
     
     var a = {name: "hello"}
     var str = JSON.stringify(a);
     var b = JSON.parse(str);
     b.name = 'hi';
     alert(a.name); //hello
     
   
   如何与其他浏览器的兼容
      http://www.json.org/去下载json2.js 
 
 data自定义数据
   dataset  
      data-name： dataset.name
      data-name-first: dataset.nameFirst
      
   data数据早jqery mobile中有着重要的作用
 
 延迟加载js
   js的加载会影响后面的内容加载
      很多浏览器都采用了并行加载js 但还是会影响其他内容
   html5的defer和async
     defer  延时加载，会按顺序执行，在onload执行前被触发 外链的script标签才会有用
        <script src="a.js" defer="defer"></script>
        <script src="b.js"></script>
        <script src="c.js"></script>
            先加载b c 两个js 在加载a
           
     async  异步加载，加载完就触发，有顺序问题
        <script src="a.js" async="async"></script>
        <script src="a.js" async="async"></script>
        <script src="a.js" async="async"></script>
        <img src="">
          四个文件同时加载
同步加载、异步加载、延迟加载 的区别
1 同步加载
　　平常默认用的都是同步加载。如：<script src="http://yourdomain.com/script.js"></script> 
　　同步模式又称阻塞模式，会阻止浏览器的后续处理，停止了后续的文件的解析，执行，如图像的渲染。流览器之所以会采用同步模式，是因为
  加载的js文件中有对dom的操作，重定向，输出document等默认行为，所以同步才是最安全的。通常会把要加载的js放到body结束标签之前，
  使得js可在页面最后加载，尽量减少阻塞页面的渲染。这样可以先让页面显示出来

2 异步加载

(function() { 
var s = document.createElement('script'); 
s.type = 'text/javascript'; 
s.async = true; 
s.src = 'http://yourdomain.com/script.js'; 
var x = document.getElementsByTagName('script')[0]; 
 x.parentNode.insertBefore(s, x); 
})();

异步加载也叫非阻塞模式加载，浏览器在下载js的同时，同时还会执行后续的页面处理。
在script标签内，用js创建一个script元素并插入到document中，这种就是异步加载js文件了。

也可以通过onreadystatechange   和 onload 来监听js什么时候加载完

同步加载流程是瀑布模型，异步加载流程是并发模型。

3 延迟加载（lazy loading）
前面解决了异步加载（async loading）问题，再谈谈什么是延迟加载。
延迟加载：有些 js 代码并不是页面初始化的时候就立刻需要的，而稍后的某些情况才需要的。延迟加载就是一开始并不加载这些暂时不用的js，
而是在需要的时候或稍后再通过js 的控制来异步加载。
也就是将 js 切分成许多模块，页面初始化时只加载需要立即执行的 js ，然后其它 js 的加载延迟到第一次需要用到的时候再加载。
特别是页面有大量不同的模块组成，很多可能暂时不用或根本就没用到。
就像图片的延迟加载，在图片出现在可视区域内时（在滚动条下拉）才加载显示图片

4 预加载

预加载是一种浏览器机制，使用浏览器空闲时间来预先下载/加载用户接下来很可能会浏览的页面/资源，当用户访问某个预加载的链接时，如果从缓存
命中,页面就得以快速呈现   
 
DOM文档加载的步骤为

解析HTML结构。
加载外部脚本和样式表文件。
解析并执行脚本代码。
DOM树构建完成。//DOMContentLoaded
加载图片等外部文件。
页面加载完毕。//load

在第4步，会触发DOMContentLoaded事件。在第6步，触发load事件。

        
   Labjs库   
 
历史管理
   触发历史管理
      1 通过跳转页面
      2 hash
      3 pushState
      
    onhashchange  改变hash值管理页面
    
    window.location.hash = 一个随机数
    
    window.onhashchange = function(){
      odiv.innerHTML = json[window.location.hash.substring(1)];
    }
    
    window.location  浏览器地址信息
    widow.location.href  浏览地址
    window.location.search  url ?号后面的内容
    window.location.hash  url #号后面的内容
    
    history
       服务器下运行
       pushState 三个参数  数据 标题(没实现) 地址(可选)
       onpopstate事件  读取数据  event.state
       注意网址是虚假的，需在服务器指定对应页面，不然刷新找不到页面
       
       history.pushState(arr,'',arr) 存数据
       
       window.onpopstate = function(ev){
          odiv.innerHTML = ev.state
       }    
 
loction和history的区别
     最外层top跳转页面，适合用于iframe框架集top.window.location.href("${pageContext.request.contextPath}/Login_goBack");
     window.location.href=“url”：改变url地址； 

     window.location.replace(“url”)：将地址替换成新url，该方法通过指定URL替换当前缓存在历史里（客户端）的项目，
     因此当使用replace方法之后，你不能通过“前进”和“后 退”来访问已经被替换的URL，这个特点对于做一些过渡页面非常有用！
     window.location.reload()：强制刷新页面，从服务器重新请求！
     
     window.location 对象在编写时可不使用 window 这个前缀。 一些例子：
     host 设置或返回url中的主机名和端  "www.google.com:8080"
     location.hostname  设置返回 web 主机的域名 "www.google.com"
     location.pathname  设置返回当前页面的路径和文件名 "/loanOrder/detail"
     location.port 设置或返回 web 主机的端口 （80 或 443）没有则为空"" "8080"
     location.protocol 设置返回所使用的 web 协议（http:// 或 https://）
     口
     
     hash	"#type"	设置或返回URL中的#后面的hash值，如果没有则为""
     search  "?orderId=1236"	返回URL的查询字符串。这个字符串以"?"开头
     
     
     Window Location Assign 
     location.assign() 方法加载新的文档。
     
     Window History
       window.history对象在编写时可不使用 window 这个前缀。
       为了保护用户隐私，对 JavaScript 访问该对象的方法做出了限制。
     
     history.back() - 与在浏览器点击后退按钮相同  方法加载历史列表中的前一个 URL。
     history.forward() - 与在浏览器中点击按钮向前相同 方法加载历史列表中的下一个 URL。
     history.go()  参数负数是后退  整数向前 
     
     window.history.pushStaet(stateObject,title,url)
       将当前的url和history.state加入到history中，并用新的state和url替换当前的，不会造成页面刷新
       stateObject    //与要跳转到的URL对应的状态信息，没有特殊的情况下可以直接传{}
       title       //现在大多数浏览器不支持或者忽略这个参数，我们在用的时候建议传一个空字符串
       url            //这个参数提供了新历史纪录的地址,它不一定要是绝对地址，也可以是相对的，不可跨域

    window.history.replaceState(stateObject,title,url)
    用新的state和url替换当前，不会造成页面呢属性
    stateObject    //与要跳转到的URL对应的状态信息，没有特殊的情况下可以直接传{}
    title       //现在大多数浏览器不支持或者忽略这个参数，我们在用的时候建议传一个空字符串
    url            //这个参数提供了新历史纪录的地址,它不一定要是绝对地址，也可以是相对的，不可跨域
    
    popstate每次活动历史记录条目在同一文档的两个历史记录条目之间改变时，将事件分派到窗口。  
    window.onpopstate
    获取  ev.state;
 
 html5新特性的浏览器支持情况
   http://www.caniuse.com/#index
 
 拖放
   ondraggble
     设置为true，元素就可以拖拽了
 
 拖放事件
   拖拽元素事件  事件对象为被拖拽元素
     ondragstart  拖拽前触发
     ondrag  拖拽前，拖拽结束之间，连续触发
     ondragend 拖拽结束触发
     
   目标元素事件  事件对象为目标元素
     ondragenter  进入目标元素触发  相当于mouseover
     ondragover  进入目标离开目标之间，连续触发
     ondragleave 离开元素触发，相当于mouseout
     ondrop  在，目标元素上释放鼠标触发
     
      要想触发drop事件，就必须在dragover当中阻止默认事件
        ev.preventDefault();
 
   拖放事件
     事件的执行顺序： drop不触发的时候
       dragstart -> drag -> dragenter -> dragover -> dragleave -> dragend
     事件的执行顺序 drop触发的时候（drop的时候阻止默认时间）
        dragstart -> drag -> dragenter -> dragover -> drop -> dragend
     
     不能释放的光标和释放的光标不一样
 
    拖放事件
     解决火狐下的问题
       必须设置dataTransfer 对象的setDate方法才可以拖拽除图片外的其他标签
       
     dataTransfer对象
       setData()  设置数据key和value  必须是字符串
       getData()  获取数据，根据key值，获取对应的value

      ev.dataTransfer.setData('name', 'hello') 在拖放开始设置 ondragstrat
      ev.dataTransfer.getData('name')   在释放的时候设置
     
     dataTransfer 对象
       effectAllowed
         effectAllowed  设置光标样式(none, copy,copyLink,copyMove, link, linkMove, move, all 和 uninitialized)
         
       setDragImage  拖拽的阴影
           三个参数  指定的元素  坐标x  坐标y
           
       files
          获取外部拖拽的文件，返回一个filesList列表
          filesList下有个type属性，返回文件类型
          
          fs = ev.dataTransfer.files
          fs[0].type
         
      FileReader  读取文件信息
         readAsDataURL
            参数为要读取的文件对象，将文件读取为DataUrl
         onload
            当读取文件成功完成的时候触发此事件
            this.result  来获取读取的文件数据， 如果是图片，将返回base64格式的图片数据
            
         var fd = new FileReader();
         fd.readAsDataURL(fs[0])
         fd.onload = function(){
           console.log(this.result)
         } 
         
         
跨文档通信
  postMessage对象
    接受消息的窗口对象.postMessage()
    一参 发送的数据  二参 接受的域
    交互方式
      iframe   父页面 ： contentWindow 、子页面：window.top
      窗口页：  父页面：  window.open、 子页面  window.opener
      
    接受事件
      message
      ev.origin  发送数据来源的域
      ev.data  发送的数据
      
      如果我们要操作一个iframe里面的元素，首先要获取到iframe引入的页面的window
         iframeId.contentWindow  
  
   window.open('地址', '_blank')  window.open 返回被打开窗口的window对象
         
         当本页面和被包含的页面不在同一个域名下的时候，这种操作就会有跨域操作安全限制问题。
         
         postMessage  可以通过这个方法给另外一个窗口发送信息
                    接收消息的窗口的window对象  postMessage
              iframeId.contentWindow.posMessage('数据','域名(如 hhtp://www.a.com)')
              
            在iframe中接受postMessage发送过来的数据
              message:  当窗口接收到postMessage发送过来的数据的时候触发
              
              window.addEventListener('message', function(ev){
                 // message事件的事件对象下保存了发送过来的内容
                 //ev.data   发送过来的数据
                 //ev.origin  发送过的域名
              },false);
              
              
              如果在子级页面操作父级页面
                parent  => window如果当前页面是顶级，没有被其他页面所包含，那么parent就是当前页面的window对象，如果被包含了，
                则parent就是包含当前页面的父级页面的window对象
                parent.document.body.style.background = 'green';
                
                window 当前的页面的window对象
                parent
                top  顶层窗口对象
                
             新打开的页面改变打开它的页面
               通过window.open方法打开当前页面的窗口
               window.opener.document.body.style.background = '';
  

  
  XMLHttpRequest Level 2
    XMLHttpRequest  改进版
      请求页面与数据页面必须属性不同的域
      服务器要设置响应头信息
      Origin值展现
      IE  XDomainRequest
      新的事件  onload等
      http://w3.org/TR/XMLHttpRequset2
      http://msdn.microsoft.com/en-us/library/cc288060(VS.85).aspx
    
    进度事件
      upload.onprogress  上传
      FormData对象
      ev.tota(已发送的量)、ev.loaded（待发送的量）
      onprogress  下载
 
       var xhr = new XMLHttpRequest();
      xhr.onreadystatechange = function(){
        if(xhr.readyState == 4){
          if(xhr.status == 200){
            alert(xhr.responseText)
          }
        }
      }
      xhr.open('get','地址',true)
      xhr.send();
      
      在标准浏览器下，XMLHttpResquest对象已经是升级版本，支持了更多的特性，可以跨域了但是想实现跨域请求，还需要后端的配合
        在后端文件 <?php 后面需要设置
           header('Access-Control-Allow-Origin:http://www.a.com') 这是访问资源的域
           
      在ie下
        XDomainRequeset iE如果想实现跨域请求，则需要使用另外一个对象去实现
        
        var oXDomainRequest = new XDomainRequest()
		oXDomainRequet.onload = function(){
		  aelrt(this.responesText)
		}
		oXDomainRequest.open('get','http://www.b.com/ajax.php', true)
		oXDomainRequest.send();
		
    ajax上传  ie不支持
	  alert(myfile.value)  获取到是file空间的value值，这个内容是心事给加看的，不是我们选择的内容
	  
	  alert(myfile.files) 返回文件列表

    使用post提交时
	  需用xhr.setRequestheader('X-Request-With','XMLHHttpRequest')
        // xhr.send('file=leo');
		
		var oFprmData = new FormData();  //通过FormData来构建提交数据
		oFormData.append('file', mafilename.files[0])
		xhr.send(oFormDate);
		
		var oUpload = xhr.upload;
		oUpload.onprogress = function(ev){
		   console.log(ev.tatal + : ev.loaded)
		}



websocket

互联网协议
  http://www.ruanyifeng.com/blog/2012/05/internet_protocol_suiite_part_i.html
  TCP/IP协议
    定义了电子设备如何炼乳英特网，以及数据在他们之间传输的标准（如何传输）
	传输数据（协议）类型 Email  www FTP等
  hTTP协议
    浏览器和万维网服务器之间相互通信的规则
	
	HTTP协议的特点
	  功能很强大
	  采用请求 响应模式  单项通信
	  短链接 响应完成链接就断开
	  
  websocket  什么是websocket
    基于TCP的双向的  全双工的数据链接
	  双向的  客户端  服务端
	  全双工  数据的发送与接受  两者同步进行
	建立socket应用
	  服务器必须支持web socket
	  
	  nodejsde 简介
	    Ryan Dahl  基于FGoogleV8引擎创建的一套用来编写高兴能网络服务器的javascript工具包
        nodejs  用js写服务器应用
		
		var http = require('http');
		var fs = require('fs');
		var documentRoot = 'E:/html/websocket/www';
		
		var serv = http.createServer(function(req, res){
		  
		  var url = req.url;
		  //console.log(url);
		  
		  var file = doucmentRoot + url;
		  console.log(file)
		  
		  fs.readFile(file, function(err, data){
		    if(err){
			  res.writeHeader(404, {
			    'content-type':'text/html;charset="utf-8"'
			  );
			  res.write('<h1>404</h1><p>页面未找到</p>');
			  res.end();
			}else{
			  res.writeHeader(200, {
			    'content-type': 'text/html;chaeset="utf-8"'
			  });
			  res.write(data)
			  res.end();
			}
		  });
		  
		}).listen(8888);
		
	  
 	node.js
	  安装node.js
	  转到项目目录
	  运行node scriptname.js
	  http服务器的创建
	  安装websocket模块npm install socket.io
	  websocket服务的创建



        var http = require('http');
		var fs = require('fs');
		var io = require（socket.io）
		
		var documentRoot = 'E:/html/websocket/www';
		
		var serv = http.createServer(function(req, res){
		  
		  var url = req.url;
		  //console.log(url);
		  
		  var file = doucmentRoot + url;
		  console.log(file)
		  
		  fs.readFile(file, function(err, data){
		    if(err){
			  res.writeHeader(404, {
			    'content-type':'text/html;charset="utf-8"'
			  );
			  res.write('<h1>404</h1><p>页面未找到</p>');
			  res.end();
			}else{
			  res.writeHeader(200, {
			    'content-type': 'text/html;chaeset="utf-8"'
			  });
			  res.write(data)
			  res.end();
			}
		  });
		  
		}).listen(8888);
		
		var socket = io.listen(serv);
		
		socket.sockets.on('connection', function(){  //回掉函数
		  
		  //socket
		  //console.log('有人通过socket进来了')
		  socket.emit('hello', '欢迎');  //向客户端发送数据
		  socket.on('hellotoo', function(data){ //接受客户端的数据
		    console.log(data)
		  });
		  
		  //socket.broadcast.emit()  广播事件
		  socket.broadcast.emit('a', '有新人进来了');
		
		});
		
		
		必须引入client.socket.js 文件
		var socket = null;
		
		socket = io.connect('http://localhost:8888')
		socket.on('hello', function(data){ //监听服务端的数据
		  console.log(data)
		  
		  this.emit('hellotoo', '欢迎欢迎') //想服务端发送信息
		  
		  socket.on('a',function(data){
		    conle.log(data)
		  })

		})


离线存储
  离线应用是什么？
    乘坐飞机，手机信号弱 去演讲的时候 可能没有网络 这个时候就采用离线应用
	离线存储如何工作 ？
  离线存储的好处
    没网的时候，可以正常访问
	快速响应页面，不必用多个HTTP占用资源宽带
	缓存的可以是任何文件

  搭建离线应用程序
    1 服务器设置头信息
	   AddType.text/cache-mamifest .manifest
	   
	2 html标签加
	  manifest = "xxx.manifest";
	
	3 写manifest文件， 离线的清单列表
	  先写 CACHE MANIFEST
	  FALLBACK  第一个网络地址没获取到，就走第二个缓存
	  NETWORK  无论缓存中存在与否，均从网络获取
	  
	  
web Workers
  什么是worker？
  js的单线程（放入ui队列的个数，利用定时器解决）
  可以让web应用程序具备后台处理能力，对对对县城的支持非常好
  
  Worker  API
    new  Worker('后台处理的js地址')
	利用postMessage传输数据
	importScript('导入其他文件')
	
   worker 运行环境
     navgator appname  appVersion  userAgent  platform onLine
	 location  所有的属性都是只读的
	 self  指向全局的worker对象
	 所欲的ECMA对象 Object Array  Date等
	 addEventListener  和 removeEventListener()
	 XMLHttpRequest构造器
	 setTimeout 和setInterval方法
	 onerror属性  
	 close() 方法  立刻停止worker 运行
	 importScripts  方法
	
	var w1 = new worket('test.js');
	
	test.js文件中
	  
	  importScripts(); 在这个文件中引入其他文件  同步模式
	  
	  self.onmessage = funciton(ev){
	    // alert(ev.data) 无法识别alter
		self.postMessage(ev.data + '秒味')
	  }
	
	worker页面中
	w1.postMessage('hi');
	w1.onmessage = function(ev){
	  alert(ev.data)
	}
	
	w1.close();
	
	
	内容编辑
	  contenteditable = "true";
	
	语音输入
	  <input type="text" x-webkit-speech />  chrome实现了
 
  桌面提醒
    window.webkitNotification.requestPermission();
	statue = window.webkitNotifications.checkPermission();
	var notification = window.webkitNotifications.createNotification("[imgurl]","Title","Body");
	notification.show();


地理位置  Geolocation
  经度  南北极的连接线
  维度  东西链接的线

位置信息从何而来
  IP地址
  GPS全球定位系统
  WI-FI无线网络
  基站
  
  LBS : 基于地理位置信息的应用
  
  地理位置的对象
    navigator.geolocation
	   单次定位请求  getCurrentPosition(请求成功，请求失败，数据收集方式)
	   请求成功的函数
	     经度  coords.longitude
		 纬度  coords.latitude
		 准确度  coods.accuracy
		 海拔  coords.altitude
		 海拔准确度  coords.altitudeAcuracy
		 行进方向  coords.heading
		 地面速度  coords.speed
		 时间戳 new Date(position.timestamp)
		 
   navigator.geolocation
     请求失败函数
	   失败编号  code
	   0 不包括其他编号的错误
	   1 用户拒绝浏览器获取位置信息
	   2 尝试获取用户信息，但失败了
	   3 设置了timeout值，获取位置超时了
	   
	  数据收集  json形式
	    enableHighAcuracy  更精确的查找 默认false
		timeout  获取位置允许最长时间， 默认infinity
		maximumAge  位置可以缓存的最大时间 默认0
		
	  多次定位请求  watchPosition(像setInterval)
	    移动设备有用  位置改变才会触发
		配置参数  frequency更新的频率 在数据收集的里面写
	  
	  关闭更新请求  clearWatch(像clearInterval)

    百度地图的API
	 <script src="http://api.map.baidu/api?v=1.3"></script>

  navigator.geolocation.getCurrentPosition(function(position){
    var x = position.coords.longitude;
    var y = position.coords.latitude;
    
    var map = new BMap('div1');
    var pt = new BMap.Point(y,x);
    
    map.centerAndZoom(pt, 14);
    map.enableScrollWheelZoom();  支持滚轮事件
    //var marker1 = new BMap.MArker(pt); //创建标注
   // map.addOverlay(marker1);
    
    var myIcon = new BMap.Icon('miaov.png', new BMap.Size(30,30))
    var marker2 = new BMap.Marker(pt, {icon: myIcon});
    map.addOverlay(marker2)
    
    var opts = {
      width : 200,  信息窗口的宽度
      height： 60，  信息窗口的高度
      title:'海底捞'  信息窗口标题
      enableMessage: true,  设置允许信息窗口发送短息
      message:"晚上吃饭"
    }
    var infoWindow = new BMap.InfoWindow('地址： 北京市东城区xxxxx', opts)  //创建信息窗口对象
    
    map.openInfoWindow(infoWindow, pt)  //开启信息窗口
    
  })
  
本地存储
  cookie
    数据存储到计算机中，通过浏览器控制添加与删除数据
   cookie的特点
     存储限制
       域名100个cookie  魅族值大小4kb
     客户端 服务器端  都会请求服务器（头信息）
     页面间的cookie是共享   
  
  storage
    sessionStorage
      session临时回话  从页面打开到页面关闭的时间段
      窗口的临时存储 页面关闭 本地存储消失
    localStorage
      永久存储（可以手动删除数据）
   storage的特点
     存储限制
     客户端完成  不会请求服务器处理
     sessionStorage数据是不共享的  localStorage共享
    
    storage API
      setItem()
        设置数据 key/value类型 类型都是字符串
        可以用获取属性的形式操作
      getItem()
        获取数据 通过key来获取到相应的的value
      removeItem();
        删除数据  通过key来删除相应的数据
      clear()
        删除全部存储信息
	
    window.sessionStorage.setItem('name', value[0].value);
 
 onunload  关闭浏览器事件
 
   存储事件
      当数据有改变或修改的情况下，就会触发storage事件
      在对数据进行改变的窗口上是不会触发的
      key  修改或删除的key值 ，如果调用clear(), key为null
      newValue  新设置的值，如果调用removeStorage()  key为null
      oldValue  调用当前的value值
      storageArea  当前的storage对象
      url  触发该脚本变化的文档url
      注  session同窗口才可以，  例子 iframe操作
 
   window.addEventListener('storage', function(){//当前页面不会触发 和这个共享的页面才会触发
     alert(123)
   }, false)


音频和视频
  标签
    audio  video
    source
    
  视频容器
    视频文件 类似于压缩了一组文件
      音频轨道
      视频轨道
      元数据  封面  标题  字幕等
      格式  avi  flv  mp4 mkv  ogv 等
    
   编解码器
      原始的视频容器非常大  添加需编码  播放需解码
      音频编解码器
        AAC  MPEG-3  Ogg Vorbis
      视频编解码器
        H.264  VP8  Ogg Theora
        
      媒体元素
        controls  显示或隐藏用户控制页面
        autoplay  媒体是否自动播放
        loop  媒体是否循环播放
        currentTime  开始到播放现在所用的时间
        duration  媒体总时间（只读）
        volume  0.0 ~ 1.0 的 音量相对值
        muted  是否静音
        autobuffer  开始的时候是否缓冲加载  autoplay 的时候，忽略此属性
      
      媒体元素_2
        paused  媒体是否暂停（只读）
        ended  媒体是否播放完毕  只读
        error  媒体发生错误的时候，返回错误代码 只读
        currentSrc  以字符串的形式返回媒体地址
        
        play()  媒体播放
        pause()  媒体暂停
        load()  媒体加载好后执行 预加载时候用
     
     媒体元素
          loadstart
          progress
          suspend
          emptied
          stall
          play
          stalled
          play
          pause
          loadedmetadata
          loadedata
          waiting
          playing
          canplay
          canplaythrough
          seeking
          seeked
          timeupdate
          ended
          ratechange
          durationchange
          volumechange
       
     video额外属性
       poster  视频播放前的预览图片
       width  height  设置视频的尺寸
       videoWidth  videoHeight  视频的实际尺寸  只读
       
       媒体元素的方法 火狐下  mozRequestFullScreen()


window he document 的区别
Window 对象
所有浏览器都支持 window 对象。它表示浏览器窗口。
所有 JavaScript 全局对象、函数以及变量均自动成为 window 对象的成员。
全局变量是 window 对象的属性。
全局函数是 window 对象的方法。
甚至 HTML DOM 的 document 也是 window 对象的属性之一：

对于Internet Explorer、Chrome、Firefox、Opera 以及 Safari：
window.innerHeight - 浏览器窗口的内部高度
window.innerWidth - 浏览器窗口的内部宽度

对于 Internet Explorer 8、7、6、5：
document.documentElement.clientHeight
document.documentElement.clientWidth
或者
document.body.clientHeight
document.body.clientWidth

一些其他方法：
window.open() - 打开新窗口
window.close() - 关闭当前窗口
window.moveTo() - 移动当前窗口
window.resizeTo() - 调整当前窗口的尺寸

Document 对象
每个载入浏览器的 HTML 文档都会成为 Document 对象。
Document 对象使我们可以从脚本中对 HTML 页面中的所有元素进行访问。
提示：Document 对象是 Window 对象的一部分，可通过 window.document 属性对其进行访问。

Document 对象集合
集合	描述
all[]	提供对文档中所有 HTML 元素的访问。
anchors[]	返回对文档中所有 Anchor 对象的引用。
applets	返回对文档中所有 Applet 对象的引用。
forms[]	返回对文档中所有 Form 对象引用。
images[]	返回对文档中所有 Image 对象引用。
links[]	返回对文档中所有 Area 和 Link 对象引用。

Document 对象属性
属性	描述
body	
提供对 <body> 元素的直接访问。
对于定义了框架集的文档，该属性引用最外层的 <frameset>。
cookie	设置或返回与当前文档有关的所有 cookie。
domain	返回当前文档的域名。
lastModified	返回文档被最后修改的日期和时间。
referrer	返回载入当前文档的文档的 URL。
title	返回当前文档的标题。
URL	返回当前文档的 URL。

Document 对象方法
方法	描述
close()	关闭用 document.open() 方法打开的输出流，并显示选定的数据。
getElementById()	返回对拥有指定 id 的第一个对象的引用。
getElementsByName()	返回带有指定名称的对象集合。
getElementsByTagName()	返回带有指定标签名的对象集合。
open()	打开一个流，以收集来自任何 document.write() 或 document.writeln() 方法的输出。
write()	向文档写 HTML 表达式 或 JavaScript 代码。
writeln()	等同于 write() 方法，不同的是在每个表达式之后写一个换行符。

Document 对象描述
HTMLDocument 接口对 DOM Document 接口进行了扩展，定义 HTML 专用的属性和方法。
很多属性和方法都是 HTMLCollection 对象（实际上是可以用数组或名称索引的只读数组），其中保存了对锚、表单、链接以及其他可脚本元素的引用。
这些集合属性都源自于 0 级 DOM。它们已经被 Document.getElementsByTagName() 所取代，但是仍然常常使用，因为他们很方便。
write() 方法值得注意，在文档载入和解析的时候，它允许一个脚本向文档中插入动态生成的内容。
注意，在 1 级 DOM 中，HTMLDocument 定义了一个名为 getElementById() 的非常有用的方法。在 2 级 DOM 中，该方法已经被转移到了 Document 
接口，它现在由 HTMLDocument 继承而不是由它定义了。




decodeURI()	解码某个编码的 URI。
decodeURIComponent()	解码一个编码的 URI 组件。
encodeURI()	把字符串编码为 URI。
encodeURIComponent()	把字符串编码为 URI 组件。
escape()	对字符串进行编码。
eval()	计算 JavaScript 字符串，并把它作为脚本代码来执行。
getClass()	返回一个 JavaObject 的 JavaClass。
isFinite()	检查某个值是否为有穷大的数。
isNaN()	检查某个值是否是数字。
Number()	把对象的值转换为数字。
parseFloat()	解析一个字符串并返回一个浮点数。
parseInt()	解析一个字符串并返回一个整数。
String()	把对象的值转换为字符串。
unescape()	对由 escape() 编码的字符串进行解码。

Infinity	代表正的无穷大的数值。
java	代表 java.* 包层级的一个 JavaPackage。
NaN	指示某个值是不是数字值。
Packages	根 JavaPackage 对象。
undefined	指示未定义的值。

全局对象描述
全局对象是预定义的对象，作为 JavaScript 的全局函数和全局属性的占位符。通过使用全局对象，可以访问所有其他所有预定义的对象、函数和属性。
全局对象不是任何对象的属性，所以它没有名称。
在顶层 JavaScript 代码中，可以用关键字 this 引用全局对象。但通常不必用这种方式引用全局对象，因为全局对象是作用域链的头，这意味着所有非
限定性的变量和函数名都会作为该对象的属性来查询。例如，当JavaScript 代码引用 parseInt() 函数时，它引用的是全局对象的 parseInt 属性。
全局对象是作用域链的头，还意味着在顶层 JavaScript 代码中声明的所有变量都将成为全局对象的属性。
全局对象只是一个对象，而不是类。既没有构造函数，也无法实例化一个新的全局对象。
在 JavaScript 代码嵌入一个特殊环境中时，全局对象通常具有环境特定的属性。实际上，ECMAScript 标准没有规定全局对象的类型，JavaScript 
的实现或嵌入的 JavaScript 都可以把任意类型的对象作为全局对象，只要该对象定义了这里列出的基本属性和函数。例如，在允许通过 LiveConnect 
或相关的技术来脚本化 Java 的 JavaScript 实现中，全局对象被赋予了这里列出的 java 和 Package 属性以及 getClass() 方法。而在客户端 
JavaScript 中，全局对象就是 Window 对象，表示允许 JavaScript 代码的 Web 浏览器窗口。
在 JavaScript 核心语言中，全局对象的预定义属性都是不可枚举的，所有可以用 for/in 循环列出所有隐式或显式声明的全局变量

var variables = "";

for (var name in this) 
{
variables += name + "<br />";
}

document.write(variables);


var variables = "";

for (var name in doucment) 
{
variables += name + "<br />";
}

document.write(variables);


decodeURIComponent() 函数可对 encodeURIComponent() 函数编码的 URI 进行解码。
语法
decodeURIComponent(URIstring)
参数	描述
URIstring	必需。一个字符串，含有编码 URI 组件或其他要解码的文本。
返回值
URIstring 的副本，其中的十六进制转义序列将被它们表示的字符替换。
实例
在本例中，我们将使用 decodeURIComponent() 对编码后的 URI 进行解码：
<script type="text/javascript">

var test1="http://www.w3school.com.cn/My first/"

document.write(encodeURIComponent(test1)+ "<br />")
document.write(decodeURIComponent(test1))

</script>
输出：
http%3A%2F%2Fwww.w3school.com.cn%2FMy%20first%2F
http://www.w3school.com.cn/My first/

         
         
       
    <script>
      //代码
    </script>
  </body>
</html>


布局
  上中下一栏式
    <header id="header" class="warp"></header>
    <section id="section" class="warp"></section>
    <footer id="footer" class="warp"></footer>
    
    .warp{width: 900px; margin: 0 auto;}
    #header{height: 100px;}
    #section{height: 500px;}
    #footer{height: 80px;}
    
  左右两栏式
    <div class="warp">
      <aside id="left"></aside>
      <section id="right"></section>
    </div>
    
    第一种  混合浮动加普通流
      .warp{width: 900px;margin: 0 auto;}
      #left{width: 200px; height: 500px;float: left}
      #right{height: 500px; margin-left: 200px;}
    第二种  纯浮动
      .warp{width: 900px;margin: 0 auto; overflow: hidden;}
      #left{width: 200px;height: 500px;float: left;}
      #right{width: 700px;height: 500px; float: left;}
    第三种  定位
    .warp{width: 900px;mawrgin: 0 auto; position: relative;}
    #left{width: 200px; height: 500px;position: absolute; left: 0;top: 0;}
    #right{width: 200px; height: 500px;position: absolute; right: 0;top: 0;}
    
   左右两栏加页眉页脚
     <div class="warp">
       <header id="header"></header>
       <section id="section">
         <aside id="left"></aside>
         <section id="right"><section>
       </section>
       <footer id="footer"><footer>
     </div>
     
     .warp{width: 900px; margin: 0 auto;}
     .#header{width: 100%; height: 100px;}
     #section{width: 100%;height: 500px;}
     #footer{width: 100%; height: 80px;}
     #left{width: 200px; height: 100%;float: left;}
     #right{width: 700px; height: 100%; float: left;}
     
   左右中三栏
     <div id="warp">
       <aside id="left"></aside>
       <aside id="right"></aside>
       <section id="center"></section>
     </div>
     
     .warp{width: 80%;margin: 0 auto;}
     #left{width: 200px;height: 500px; float: left;}
     #right{width: 200px; height: 500px; float: right;}
     #center{height: 500px;margin:0 200px;}
     
    左中右三栏之双飞翼
      <div class="warp">
        <section id="main">
          <div class="contet"></div>
        </section>
        <aside id="left"></aside>
        <aside id="right"></aside>
      </div>
      
      .warp{margin: 0 auto; width: 80%;}
      #main{width: 100%; float: lelft}
      #left{width: 200px; float: left;height: 500px;margin-left: -100%;}
      #right{width: 200px; float: left; height: 500px;margin-left: -200px;}
      content{height: 500px;margin: 0 200px;}
      
    左中右加页眉页脚
      <header id="header" class="warp"></header>
      <section id="section" class="warp">
        <section id=middle>
          <div class="content"></div>
        </section>
        <aside id="left"></aside>
        <aside id="right"></aside>
      </section>
      <footer id="footer" class="warp"></footer>
      
      .warp{width: 900px; margin: 0 auto;}
      #header{height: 100px;}
      #section{height: 500px;}
      #footer{height: 100px;}
      
      #middle{width:100%;float: left;}
      #left{width: 200px;flaot: left; margin-left: -100%;}
      #right{width: 200px float: left; margin-left: -200px;}
      .content{height: 500px;margin: 0 200px;}
