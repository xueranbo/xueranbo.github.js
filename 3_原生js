1 基本数据类型
  数字 Number 
    八进制数和十六进制数
    浮点数
      要定义浮点值，必须包括小数点和小数点后的一位数字（例如，用 1.0 而不是 1）。这被看作浮点数字面量。
    特殊的 Number 
       几个特殊值也被定义为 Number 类型。前两个是 Number.MAX_VALUE 和 Number.MIN_VALUE，它们定义了 Number 值集合的外边界。所有 ECMAScript
       数都必须在这两个值之间。不过计算生成的数值结果可以不落在这两个值之间。
      当计算生成的数大于 Number.MAX_VALUE 时，它将被赋予值 Number.POSITIVE_INFINITY，意味着不再有数字值。同样，生成的数值小于 
      Number.MIN_VALUE 的计算也会被赋予值 Number.NEGATIVE_INFINITY，也意味着不再有数字值。如果计算返回的是无穷大值，那么生成的结果不能再用
      于其他计算。
      事实上，有专门的值表示无穷大，（如你猜到的）即 Infinity。Number.POSITIVE_INFINITY 的值为 Infinity。Number.NEGATIVE_INFINITY 的值为
      -Infinity。
     由于无穷大数可以是正数也可以是负数，所以可用一个方法判断一个数是否是有穷的（而不是单独测试每个无穷数）。可以对任何数调用 isFinite() 方法
     ，以确保该数不是无穷大。
     特殊值  NAN
     
  布尔值 booleans  值为true 或false
    Boolean 类型是 ECMAScript 中最常用的类型之一。它有两个值 true 和 false （即两个 Boolean 字面量）。
    即使 false 不等于 0，0 也可以在必要时被转换成 false，这样在 Boolean 语句中使用两者都是安全的
    
  空 null  object - 如果变量是一种引用类型或 Null 类型的
    typeof 运算符对于 null 值会返回 "Object"。这实际上是 JavaScript 最初实现中的一个错误，然后被 ECMAScript 沿用了。现在，null 被认为是对象的
    占位符，从而解释了这一矛盾，但从技术上来说，它仍然是原始值。
    alert(null == undefined);  //输出 "true"
    
  未定义 undefined
    当声明的变量未初始化时，该变量的默认值是 undefined
    var oTemp;
    前面一行代码声明变量 oTemp，没有初始值。该变量将被赋予值 undefined，即 undefined 类型的字面量。可以用下面的代码段测试该变量的值是否等于
    undefined：
    var oTemp;  alert(oTemp == undefined);
    这段代码将显示 "true"，说明这两个值确实相等。还可以用 typeof 运算符显示该变量的值是 undefined：
    var oTemp;  alert(typeof oTemp); //输出 "undefined"
    提示：值 undefined 并不同于未定义的值。但是，typeof 运算符并不真正区分这两种值。考虑下面的代码：
    var oTemp;

    alert(typeof oTemp);  //输出 "undefined"
    alert(typeof oTemp2);  //输出 "undefined"
    前面的代码对两个变量输出的都是 "undefined"，即使只有变量 oTemp2 从未被声明过。如果对 oTemp2 使用除 typeof 之外的其他运算符的话，会引起
    错误，因为其他运算符只能用于已声明的变量上。
    例如，下面的代码将引发错误：
    var oTemp;  alert(oTemp2 == undefined);
    当函数无明确返回值时，返回的也是值 "undefined"，如下所示：
    function testFunc() {
    }

    alert(testFunc() == undefined); //输出 "true"
    
  字符串 string
    String 类型的独特之处在于，它是唯一没有固定大小的原始类型。可以用字符串存储 0 或更多的 Unicode 字符，有 16 位整数表示（Unicode 是一种
    国际字符集，本教程后面将讨论它）。
    字符串中每个字符都有特定的位置，首字符从位置 0 开始，第二个字符在位置 1，依此类推。这意味着字符串中的最后一个字符的位置一定是字符串的长度减 1：
    字符串字面量是由双引号（"）或单引号（'）声明的。而 Java 则是用双引号声明字符串，用单引号声明字符。但是由于 ECMAScript 没有字符类型，所以
    可使用这两种表示法中的任何一种
    
  判断数据类型  typeof 其中 判断未定义的数据类型不安全
  
\n
换行
\t
制表符
\b
空格
\r
回车
\f
换页符
\\
反斜杠
\'
单引号
\"
双引号
\0nnn
八进制代码 nnn 表示的字符（n 是 0 到 7 中的一个八进制数字）
\xnn
十六进制代码 nn 表示的字符（n 是 0 到 F 中的一个十六进制数字）
\unnnn
十六进制代码 nnnn 表示的 Unicode 字符（n 是 0 到 F 中的一个十六进制数字）


2 数据类型
   字符串  数组  object  json

3 字符串
    创建 String 对象的语法：
    new String(s);
    String(s);
    参数
    参数 s 是要存储在 String 对象中或转换成原始字符串的值。
    返回值
    当 String() 和运算符 new 一起作为构造函数使用时，它返回一个新创建的 String 对象，存放的是字符串 s 或 s 的字符串表示。
    当不用 new 运算符调用 String() 时，它只把 s 转换成原始的字符串，并返回转换后的值。
    String 对象属性
    属性	描述
    constructor	对创建该对象的函数的引用
    length	字符串的长度
    prototype	允许您向对象添加属性和方法
anchor()	创建 HTML 锚。
big()	用大号字体显示字符串。
blink()	显示闪动字符串。
bold()	使用粗体显示字符串。
charAt()	返回在指定位置的字符。
charCodeAt()	返回在指定的位置的字符的 Unicode 编码。
concat()	连接字符串。
fixed()	以打字机文本显示字符串。
fontcolor()	使用指定的颜色来显示字符串。
fontsize()	使用指定的尺寸来显示字符串。
fromCharCode()	从字符编码创建一个字符串。
indexOf()	检索字符串。
italics()	使用斜体显示字符串。
lastIndexOf()	从后向前搜索字符串。
link()	将字符串显示为链接。
localeCompare()	用本地特定的顺序来比较两个字符串。
match()	找到一个或多个正则表达式的匹配。
replace()	替换与正则表达式匹配的子串。
search()	检索与正则表达式相匹配的值。
slice()	提取字符串的片断，并在新的字符串中返回被提取的部分。
small()	使用小字号来显示字符串。
split()	把字符串分割为字符串数组。
strike()	使用删除线来显示字符串。
sub()	把字符串显示为下标。
substr()	从起始索引号提取字符串中指定数目的字符。
substring()	提取字符串中两个指定的索引号之间的字符。
sup()	把字符串显示为上标。
toLocaleLowerCase()	把字符串转换为小写。
toLocaleUpperCase()	把字符串转换为大写。
toLowerCase()	把字符串转换为小写。
toUpperCase()	把字符串转换为大写。
toSource()	代表对象的源代码。
toString()	返回字符串。
valueOf()	返回某个字符串对象的原始值



4 数组
创建 Array 对象的语法：
new Array();
new Array(size);
new Array(element0, element1, ..., elementn);

参数
参数 size 是期望的数组元素个数。返回的数组，length 字段将被设为 size 的值。
参数 element ..., elementn 是参数列表。当使用这些参数来调用构造函数 Array() 时，新创建的数组的元素就会被初始化为这些值
。它的 length 字段也会被设置为参数的个数。
Array 对象属性
属性	描述
constructor	返回对创建此对象的数组函数的引用。
length	设置或返回数组中元素的数目。
prototype	使您有能力向对象添加属性和方法。

concat()	连接两个或更多的数组，并返回结果。
join()	把数组的所有元素放入一个字符串。元素通过指定的分隔符进行分隔。
pop()	删除并返回数组的最后一个元素
push()	向数组的末尾添加一个或更多元素，并返回新的长度。
reverse()	颠倒数组中元素的顺序。
shift()	删除并返回数组的第一个元素
slice()	从某个已有的数组返回选定的元素
sort()	对数组的元素进行排序
splice()	删除元素，并向数组添加新元素。
toSource()	返回该对象的源代码。
toString()	把数组转换为字符串，并返回结果。
toLocaleString()	把数组转换为本地数组，并返回结果。
unshift()	向数组的开头添加一个或更多元素，并返回新的长度。
valueOf()	返回数组对象的原始值

  //数组去掉重复
  var arr11 = [1,2,2,4,2];
  for(var i=0;i<arr11.length;i++){
    for(var j=i+1;j<arr11.length;j++){
	  if(arr11[i] == arr11[j]){
	    arr11.splice(j,1);
		j--;
	  }
	}
  }
  //alert(arr11);
  
  //排序
  var arr12 = ['c','d','a','e'];
  //arr12.sort();//按字符的编码的高低排序；
 // alert(arr12);
  
  var arr13 = [0,23,2,5,86,32,20,9,66,76];
  //arr13.sort(); //会把数字变成字符串 第一位比较 不支持056
  //alert(arr13);
  //比较函数
  arr13.sort(function(a,b){
    return a - b;
  });
  //alert(arr13)//从小到大排序 b-a 从大到小排序
  
  //快速排序法 希尔，谢尔 冒泡 归并 选择 插入 。。。
  
  var arrwidth = ['345px','23px','10px','1000px'];
  arrwidth.sort(function(a,b){
    return parseInt(a)-parseInt(b);
  }); 
  //alert(arrwidth); //10px 23px 345px 1000px
  
  //随机排序
  var arr14 = [1,2,3,4,5,6,7,8];
  arr14.sort(function(a,b){
    return Math.random()-0.1;
  });
  //alert(arr14);
  
  //随机函数
  //Math.round(Math.random()); 0~1
  //alert(Math.round(Math.random()))
  //alert(Math.round(3.5));  //4舍5入
  //alert(Math.round(Math.random()*10)); //0~10
  //alert(Math.round(Math.random()*5+5));//5~10;
 // alert(Math.round(Math.random()*10+10));//10~20;
  //alert(Math.round(Math.random()*80+20));//20~100
  //x~y Math.round(Math.random()*(y-x)+x));
  
  var x = 42;
  var y = 49;
  //alert(Math.round(Math.random()*(y-x)+x)); //42~49的随机数；
  
  //0~x
  var x1 = 3;
  //alert(Math.round(Math.random()*x1));
  
  //1~x
  var x2 = 3
  //alert(Math.ceil(Math.random()*x2));//ceil 向上取整

5 对象

6 循环

7 定时器

8 函数 及 作用域

9 面向对象







