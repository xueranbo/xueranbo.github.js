css
  概念： 层叠样式表，用来表现html或xhtml文件样式计算机语言。
  
   后缀名一定是.css
  
  style
  
  标签样式的初始化  css reset 原则  因为每个浏览器下标签的默认样式可能不一样，
    但凡浏览器的默认样式，都不要使用
    书写原则 用到什么标签就清除所用的标签的默认样式。 
            建议不要直接将所有的标签全部加上
            不要将所有标签全部统一设置一致的reset，需根据标签默认样式特征分类设置
    内容
    body,dl,dd,p,h1,h2,h3,h4,h5,h6,{margin:0;;font-size:12px;}
    ol,ul{margin:0;padding:0;list-style:none;}
    a{text-decoration:none;}
    img{
        border:none; 在ir6下使用a标签包含住的img标签有蓝边
        vertical-align: top;  img的缝隙
     }
    
    与盒模型稀散馆的样式
      border
      margin
      padding
    标签的特有样式
      ul li
      ol li
      p
    
  
  行间样式  写在行间的样式
  
  内部样式表  <style></style>
  
  外部样式表使用link标签引入css文件进来
  
          css文件中用@import引入
  
  这几种有什么区别？
  
  1 link可以定义rss 或ref链接属性等 @import只能引入css文件
  2 兼容性问题  link是css是出的  @import是css2.1出的  老的浏览器不支持@import
  3 使用dom控制样式时的差别。当使用javascript控制dom去改变样式的时候，只能使用link标签，因为@import不是dom可以控制的。
  4 加载顺序  link同时加载css文件  而@import是css文件加载完后 在加载  @import内容 
  5 @import只能写在css文件的顶部
    
  
  优先级的问题
    1. 就近原则；  
    2. 后面的样式设定>前面的样式设定； 
    3. 特殊的样式设定>一般的样式设定；  
    4. 行内样式>ID样式>类别样式>HTML标签样式
  
  css的模块化
  
  css模块化
  原则 1 命名的规范
       2 不影响布局 一般情况下，尽量不要使用一个脱离文档流的布局（既使用了float:left/right，position:absolute/fixed的布局），
       尽量不要使用外边距（margin）。这是为了使得模块更加稳定、具备更高的可塑性；
       3 模块尽量设计方便复用的量级，避免大而全，求精巧

 继承

css的继承也是很简单的，一般来说是有这么几种方式：

在css中并写两个类，如.cm-nav, .m-nav，我们知道，这相当于让两个（组）类共享一套样式，然后我们再单独对.m-nav进行补充，实现继承和定制；
在class属性里并写两个类，如<img class="u-logo logo">，这样我们只需要在页面css中单独对.logo类进行补充，就可以实现定制；
在页面css中直接对类进行引用
，然后补充样式，实现定制，如.cm-nav { margin-bottom: 20px; }；

第一种在我们这套模式里是不可取的，因为我们的公共模块都是放在common里，不可能每继承一次就上去补一个类；
第二种可取，但是需要多一个近似的类名，不提倡；
第三种又简单又靠谱。

css预处理语言主要有两种：less和sass
  官网（英语）或者w3cplus sass guide（中文）
  
  sass有两种后缀名文件：一种后缀名为sass，不使用大括号和分号；另一种就是我们这里使用的scss文件，这种和我们平时写的css文件格式
  差不多，使用大括号和分号。
  
  1 嵌套

  sass的嵌套包括两种  一种是选择的嵌套，另一种是属性的嵌套
  
  选择器嵌套 所谓选择器嵌套的是一个选择器中嵌套另一个选择器来实现继承，从而增强了sass文件的结构行和可读性，在选择器嵌套中，可以使
  用&表示父级选择器
  
  2 变量
      默认变量 sass的默认变量仅需要在值后面加上 !default即可。
      sass的默认变量一般是用来设置默认值，然后根据需求来覆盖的，覆盖的方式也很简单，只需要在默认变量之前重新声明下变量即可
        
    // index.scss
    

    $fontSize: 16px;
    $grey: #ccc;
    
    .m-nav {
      font-size: $fontSize;
      color: $grey;
    }
    编译结果：
    
    /* index.css */
    
    .m-nav {
      font-size: 16px;
      color: #ccc;
    }
    
    特殊变量
一般我们定义的变量都为属性值，可直接使用，但是如果变量作为属性或在某些特殊情况下等则必须要以 #{$variables}形式使用。
    //sass style
    //-------------------------------
    $borderDirection:       top !default; 
    $baseFontSize:          12px !default;
    $baseLineHeight:        1.5 !default;
    
    //应用于class和属性
    .border-#{$borderDirection}{
      border-#{$borderDirection}:1px solid #ccc;
    }
    //应用于复杂的属性值
    body{
        font:#{$baseFontSize}/#{$baseLineHeight};
    }
    
    //css style
    //-------------------------------
    .border-top{
      border-top:1px solid #ccc;
    }
    body {
      font: 12px/1.5;
    }

  3 函数
    @function rem($px) {
        @return $px / 640 * 16rem;
    }
  
  扩展/继承
     sass可通过 @extend来实现代码组合声明，使代码更加优越简洁。
  运算
    sass可进行简单的加减乘除运算等
    //sass style
    //-----------------------------------
    .container { width: 100%; }
    
    article[role="main"] {
      float: left;
      width: 600px / 960px * 100%;
    }
    
    aside[role="complimentary"] {
      float: right;
      width: 300px / 960px * 100%;
    }

  4 混合（mixin） 混合，顾名思义，就是混合的意思。。。也就是我们可以事先定义一段代码块，在需要使用到的地方，直接引用（include），
  而在引用之前，这段代码都不会出现在编译文件中，也就是不会生成任何内容。
  
  
.m-nav { ... }
.m-news { ... }
.m-copy_right { ... }

改造后

// common.scss

@mixin m-nav {
  .m-nav { ... }
}

@mixin m-news {
  .m-news { ... }
}

@mixin m-copy_right {
  .m-copy_right { ... }
}


// index.scss

.g-index {
  @include m-nav;
  @include m-news;
  @include m-copy_right;
}
   
  5 import
   css的import是阻塞的，而sass的import在编译后，其实是合并文件，最后只产出一个css文件，而css则没有合并，该多少个文件就还是多少个文件。

注意：

只有import一个.sass/.scss文件的时候，才可以省去后缀名，如果是直接import一个.css文件，要补全文件名；
import之后的分号;不要漏写，会报错；
sass如果import的是一个.css文件的话，那它的作用就跟css原生的import作用一样，只有import一个sass文件的时候，才是合并文件。

  // index.scss
@import 'common';
@import 'a.css';
编译结果：

/* index.scss */

.m-nav { ... }
.m-news { ... }
.m-copy_right { ... }

@import url('a.css');

css的import之所以没有被普遍使用是有原因的。我们可以大概猜到它的工作原理：a.css import b.css以后，当浏览器加载到页面中的a.css的时候，
已经准备按照a.css的内容来渲染页面了，刚解析到第一行，发现a.css居然还import了一个b.css，于是它不得不先放下a.css（既阻塞a.css），去加载
b.css，直到b.css加载完，并且优先解析它，然后才开始回来解析a.css——鬼知道b.css会不会又import了c.css……这直接导致了渲染工作滞后，引发性能
问题。

  sass的import主要的好处就是把文件合并了，减少了请求
  
  
  模块化
    问题  1 冗余的代码
          2 使用cm-模块区别 m-模块
  
  为了方便，在这里我们把每个页面所对应的scss文件叫做 页面scss；把变量、函数、混合等（没有被引用或者执行的情况下）编译后不产生实际内容的
  代码叫做 定义类代码 ，那么相对应的其他内容就是 实际内容代码。
  
  1 mixin.scss
    .m-nav { ... }
    .m-news { ... }
    .m-copy_right { ... }
    改造后
    
    // common.scss
    
    @mixin m-nav {
      .m-nav { ... }
    }
    
    @mixin m-news {
      .m-news { ... }
    }
    
    @mixin m-copy_right {
      .m-copy_right { ... }
    }
    
    调用方式如下：

    // index.scss
    
    @import 'common'; // 记得先引入common
    
    .g-index {
      @include m-nav;
      @include m-news;
      @include m-copy_right;
    }
    
    页面中用引入 一个index.css  index.css中@import 'common'
 
   2、common.scss
     2.1、css reset(normalize)

    我们知道浏览器千差万别，各浏览器的默认样式也是不尽相同，最常见的比如body的默认内边距，p标签的默认内边距，以及ul/ol等等。这些不统一
    的默认样式经常让我们感到头疼，所以就有人提出一开始写样式就先把它们消除的想法，于是就催生了后来非常流行的reset.css。

  只是后来有人提出，这种方式太过粗暴（居然还心疼浏览器了）。。。而且会降低页面渲染的性能，最重要的是，这使得我们原本设计出来的表达各种含
  义的标签儿们，变得毫无特点了
  于是，就出现了normalize.css，normalize的目的同样是为了统一各个浏览器下各不相同的默认样式，不过它并不是简单粗暴地全部抹平，而是根据规
  范，来人为地把那些不符合规范的默认样式“扶正”，从而达到统一各个浏览器默认样式，同时保留各个标签原有特点的目的。
  
  2.2、插件
  
    所以最终，我们的common大概是这样子的：
    
    // common.scss
    
    @import './reset';
    @import './bootstrap.min';
    @import './mixin';
    事实上，如果我们不需要使用到 mixin.scss 中的变量和mixin的话，我们可以不引用它。
    
    那么我们的页面scss应该是这样的：
    
    // index.scss
    
    @import './common';
    @import './mixin';
    
    .g-index {
      ...
    }
    
  3、mixin编写规范
    所以我们需要对（全局）变量进行管理，就像我们当初管理mixin那样，不能想在哪里定义就在哪里定义，也不能动不动就修改一个全局变量：
    
    全局变量只在mixin中定义，其他scss文件定义的变量（无论是暴露到全局还是局部）都只看作局部变量，不在当前文件以外的地方使用（即便
    是在能引用到的情况下，也避免使用）；
    需要使用全局变量的地方直接import mixin；
    一般来说，定义全局变量应该慎重，全局变量的数量应该尽量少；
    尽可能不改动，如果需求变动，除非是对用途十分确定的情况，否则请新增一个全局变量来逐步替换需要修改的地方；
    不要使用太过笼统的名词来作为全局变量，比如color，建议直接是用色值的描述，比如$orange: #ff9900，这使得我们在维护上更方便扩展，如
    果色值需要修改，但是又不是所有的地方都需要修改，那么我们可以新定义一个变量来扩展它，比如$red： red。
 
    再提个问题，在页面scss的哪里调用模块？

    例一，根类外：
    
    // index.scss
    
    @import './common';
    @import './mixin';
    
    @include m-nav;
    @include m-news;
    @include m-copy_right;
    
    .g-index {
      ...
    }
    例二，根类内：
    
    // index.scss
    
    @import './common';
    @import './mixin';
    
    .g-index {
      @include m-nav;
      @include m-news;
      @include m-copy_right;
    
      ...
    }
      
  性能优化
    1、缓存
           我们只需要把common独立出来，那么common就可以做为被缓存的公共文件了。最终我们从一个页面只引用一个文件变成了一个页面引
           用两个文件，即common和页面css：
    
    // common.scss
    
    @import './reset';
    @import './bootstrap.min';
    @import './mixin';
    // index.scss
    
    @import './mixin';
    
    .g-index {
      ...
    }
    注意，不同于之前，我们这里的index.scss不再引入common.scss，所以我们最终是得到了两个css文件，而common.css是在所有页面中通过
    link标签引入的。

如此一来，我们就实现了既能够合并文件，减少请求数，又可以利用缓存，提高加载速度。

     2、压缩
         代码压缩是优化工作中最基本的一步，css的压缩空间是很大的，尤其是我们这种 垂直的书写方式 ，压缩起来是相当高效的。
    
        在sass中这很简单，sass在编译的时候提供了几种模式，其中的compressed模式是最高效的压缩模式，记得在编译打包的时候选择compressed
        模式就行了
  
  属性             属性值
  width  宽度      数字 单位px，百分号 %，less rem， rpx，
  height  高度     数字 单位px，百分号 %，less rem， rpx，
  
  border： 边框    border: 1px(边框的宽度)  solid边框的样式  #000（边框的颜色）
      也可写成  border-right:1px solid #000;  右边框  border-right：none；  无右边框
      边框的形状是非矩形
      solid  实线
      dashed  虚线
      dotted  点线  ie6不兼容
  
  background  背景 
     background:url();  引入图片地址
     background：颜色;   背景颜色  rgb(0-255,0-255,0-255)  rgba(0-255,0-255,0-255,0-1)
     background-color:#ccc；
     backrgound-img:url();  背景图片  默认平铺  no-repear  不平埔  repeat-x[y]  x轴或y轴平铺  
     background-position:10px 10px;  背景图片的定位  %  center left top right
     background-repeat:repeat-x;  x轴平铺
     background-attachment：fixed;  背景固定定位  默认scroll 滑动   inherit 继承
     background-size: 100px 100px;  背景图片的大小  cover  覆盖  contain 包含
     
     复合样式  background: 颜色  url(图片地址) no-repeat 100px 100px fixed
  
  font  字体
    font-size: 15px; 字体的大小  
    font-family: "宋体"；  字体样式
    font-weight:bold;  字体加粗  normal  正常
    font-style:italic; 字体倾斜；  normal  正常
    复合样式 这个有顺序 font: 倾斜  加粗 字体大小（必写）/行高  字体格式（必写）
   
  line-height 行高  数值  px  %  当行高为奇数时 文字的上方比下方少1px
  text-align: center; 文字居中  文本对齐方式 left right
  text-indent: 1em;  首行缩进 1个字体的大小  1em 为一个字体的大小
  text-decoration：none； 文本修饰  下划线  underline  加下划线
  line-thorght：none； 删除线  overderline 上划线
  letter-spacing:2px;  字母间距
  
  word-spacing：10px；  单词间距（以空格为解析单位） 需人为把单词用空格隔开
  
  white-space: nowarp;  强制不换行 normal
  
  字体不一样 空格的大小不一样
  
  空格的大小为宋字体大小一半
  
    
      em是相对于父级的字体大小设置的  计算公式  1 ÷ 父元素的font-size × 需要转换的像素值 = em值 em的值并不是固定的
      概念介绍：

       1、px (pixel，像素)：是一个虚拟长度单位，是计算机系统的数字化图像长度单位，如果px要换算成物理长度，需要指定精度
       DPI(Dots Per Inch，每英寸像素数)，在扫描打印时一般都有DPI可选。Windows系统默认是96dpi，Apple系统默认是72dpi。

       2、em(相对长度单位，相对于当前对象内文本的字体尺寸)：是一个相对长度单位，最初是指字母M的宽度，故名em。现指的是字
       符宽度的倍数，用法类似百分比，如：0.8em, 1.2em,2em等。通常1em=16px。

       3、pt (point，磅)：是一个物理长度单位，指的是72分之一英寸。pt=1/72(英寸), px=1/dpi(英寸)

       4、rem（root em，根em）：是CSS3新增的一个相对单位，这个单位引起了广泛关注。这个单位与em有什么区别呢？区别在于使
       用rem为元素设定字体大小时，仍然是相对大小，但相对的只是HTML根元素。这个单位可谓集相对大小和绝对大小的优点于一身，
       通过它既可以做到只修改根元素就成比例地调整所有字体大小，又可以避免字体大小逐层复合的连锁反应。目前，除了IE8及更早
       版本外，所有浏览器均已支持rem。对于不支持它的浏览器，应对方法也很简单，就是多写一个绝对单位的声明。这些浏览器会忽略
       用rem设定的字体大小。

     1、em与px的问题

       px是何物？

       px像素（Pixel）。相对长度单位。像素px是相对于显示器屏幕分辨率而言的。(引自CSS2.0手册) 

      em是相对长度单位。相对于当前对象内文本的字体尺寸。如当前对行内文本的字体尺寸未被人为设置，则相对于浏览器的默认字体尺寸。(引自CSS2.0手册)

   PX特点

    1. IE无法调整那些使用px作为单位的字体大小；

    2. 国外的大部分网站能够调整的原因在于其使用了em或rem作为字体单位；

    3. Firefox能够调整px和em，rem，但是96%以上的中国网民使用IE浏览器(或内核)。

 

   em是何物？
    em 指字体高，任意浏览器的默认字体高都是16px。所以未经调整的浏览器都符合: 1em=16px。那么12px=0.75em, 10px=0.625em。为了简化
    font -size的换算，需要在css中的body选择器中声明Font-size=62.5%，这就使em值变为16px*62.5%=10px, 这样12px=1.2em, 10px=1em,
    也就是说只需要将你的原来的px数值除以10，然后换上em作为单位就行了。

  em特点：
    1em指的是一个字体的大小，它会继承父级元素的字体大小，因此并不是一个固定的值。任何浏览器的默认字体大小都是16px。因此，
    12px = 0.75em。实际应用中为了方便换算，通常会如下设置样式：
  CSS代码
    html { font-size: 62.5%; }

   这样，1em = 10px。我们常用的1.2em理论上就是12px。但是，这个换算在IE浏览器下不成立，1.2em会比12px稍大一些，解决办法是把
   html标签样式中的62.5%改成63%，即：
  CSS代码
    html { font-size: 63%; }  

    在 中文的文章中，一般会在段首空两格。如果用px作为单位，对12px字体来说需要空出24px，对14px字体来说需要空出28px……这样换算
    非常不通 用。如果用上em单位，这个问题就很好解决了，1个字的大小就是1em，那两个字的大小就是2em。因此，只需这样定义就行了：
  CSS代码
    p { text-indent: 2em; }

   em和px两种字体单位的区别
      字体单位应该用em而不用px，原因简单来说就是支持IE6下的字体缩放，在页面中按ctrl+滚轮，字体以px为单位的网站没有反应。px
      是绝对单位，不支持IE的缩放，em是相对单位。
    我在调整本blog的时候，发现不仅仅是字体，将行距(line-height)，和纵向高度的单位都用em。保证缩放时候的整体性。

  em有如下特点：
    1. em的值并不是固定的；
    2. em会继承父级元素的字体大小。

  em重写步骤：
    1. body选择器中声明Font-size=62.5%；
    2. 将你的原来的px数值除以10，然后换上em作为单位； 
    如果只需要以上两步就能解决问题的话，可能就没人用px了。经过以上两步，你会发现你的网站字体大得出乎想象。因为em的值不固定，又
    会继承父级 元素的大小，你可能会在content这个div里把字体大小设为1.2em, 也就是12px。然后你又把选择器p的字体大小也设为1.2em，
    但如果p属于content的子级的话，p的字体大小就不是12px，而是1.2em= 1.2 * 12px=14.4px。这是因为content的字体大小被设为1.2em，
    这个em值继承其父级元素body的大小，也就是16px * 62.5% * 1.2=12px, 而p作为其子级，em则继承content的字体高，也就是12px。所以
    p的1.2em就不再是12px，而是14.4px。
    3. 重新计算那些被放大的字体的em数值。避免字体大小的重复声明，也就是避免以上提到的1.2 * 1.2= 1.44的现象。比如说你在#content
    中声明了字体大小为1.2em，那么在声明p的字体大小时就只能是1em，而不是1.2em, 因为此em非彼em，它因继承#content的字体高而变为了
    1em=12px。
    IE中的12px汉字：
    完成 em转换时还发现了一个诡异的现象，就是由以上方法得到的12px(1.2em)大小的汉字在IE中并不等于直接用12px定义的字体大小，而 
    是稍大一点。你只需在body选择器中把62.5%换成63%就能正常显示了。原因可能是IE处理汉字时，对于浮点的取值精确度有 限。本现象只发
    生在12px的汉字，英文不存在此现象。解决方法就是把style.css中的62.5%换 为63%。

   一个px、em、pt单位转换工具：

    地址：http://pxtoem.com/

    2、rem特点 

        rem是CSS3新增的一个相对单位（root em，根em），这个单位引起了广泛关注。这个单位与em有什么区别呢？区别在于使用rem为元素设
        定字体大小时，仍然是相对大小，但相对的只是HTML根元素。这个单位可谓集相对大小和绝对大小的优点于一身，通过它既可以做到只修改
        根元素就成比例地调整所有字体大小，又可以避免字体大小逐层复合的连锁反应。目前，除了IE8及更早版本外，所有浏览器均已支持rem。
        对于不支持它的浏览器，应对方法也很简单，就是多写一个绝对单位的声明。这些浏览器会忽略用rem设定的字体大小。 

  举例：

     p {font-size:14px; font-size:.875rem;}
     
     
  盒子模型
    width  height  border  margin  padding
    
    盒子大小 = border + padding + width/height
    盒子宽度 = 左右border + 左右padding + width
    盒子高度 = 上下border + 上下padding + height
    
    padding  内边距
    padding: top  right bottom left
    padding-top[right|bottom|left]  上[右|下}左]内边距
    
    内边距相当于给一个盒子加了填充厚度会影响盒子的大小
    
    只设置一个值的时候  四个方向
    两个值的时候   第一个对应上下  第二个对应左右
    三个值时候    第一个是上 第二个是左右 第三个为下
    四个值的时候  上右下左
    
    margin  外边距 标签与标签之间的距离
    margin: top right bottom left;
    
    外边距的问题
      1  上下外边距会叠压
         解决  1  上面的div底部加一个双倍的margin值  margin会取最大的margin值
               2 如果元素没有特殊特征  可以用padding代替
               3 两耳元素都添加float：left； 第二个元素  clear：both；
      
      2  父子级包含的时候子级的margin-top会传递给父级
         解决  1  父级加border: 1px #000 solid;
  
 块元素和内嵌元素
  
    块的特征
       1 默认独占一行
       2 没有宽度时，默认撑满一行
       3 支持所有的css命令  
       
    内嵌（内联，行内）的特征
       1 同排可以继续跟同类的标签
       2 内容撑开高度
       3 不支持宽高
       4 不支持上下的margin
       5 代码换行被解析  有一个空格
   
   display: block 显示为块
     使内联元素具备块属性标签的特征
   display: inline;  显示为内嵌
     是行快属性标签具备内联元素的特许
   display是将标签转换为页面中显示的类型
   display不会改变标签的本质
     
   display: inline-block;  内联块元素
     特征  1 块在一行上显示
           2 行内标签支持宽高
           3 没有宽度的时候内容撑开宽度
           4 标签换行被解析
           5 ie6 ie7不支持块属性标签inline-block（问题）
           
    1 标签的语义化，使用合适的标签
    2 标签特征的转换，样式的配合
    3 小竖线使用哪种方式进行编码(图片，边框， 背景颜色， 字符)
    4 文字行高的设置
    5 标签默认样式的处理（reset css）
    
 浮动  float
   文档流是文档中可显示对象在排列时所占用的位置。
   定义：使元素脱离文档流，按照指定方向发生移动，遇到父级边界或者相邻的浮动元素停了下来
  
   float: left[right，none，inherit]  左，右，没有，继承浮动
   
   
   clear: left|right|both|none|inherit;  元素的某个方向上不能有浮动元素
   clear:both;在左右两则均不允许浮动元素
   
   float的特征  1 块在一排上显示
                2 内联元素支持宽高
                3 默认内容撑开宽度4
                4 脱离文档流
                5 提升层级半层
                
   清除浮动  
     1 加高度  扩展性不好
     2 父级浮动  问题：页面中所有的元素都加浮动， margin左右自动失效（floats bad）
     3 inline-block  问题margin左右失效
     4 空标签清除浮动  子元素最后面加<div class-clearfix></div>  .clearfix{clear:both;} ie6下最小高度19px  
       解决后还有2px偏差
     5 br清除浮动  问题不符合工作中 结构 样式 行为 三者分离的要求
     6 alter伪类 清除浮动方法 主流方法
        .clear:after{content:""; display:block;clear:both;}
        ie6下 .clear{*zoom:1};
        alter伪类：元素内部末尾添加内容
          :after{content:"添加内容";} ie6 7 不兼容
        zoom缩放
          a  触发ie下haslayout，使元素根据自身内容计算宽高
          b  ff不支持
     7 overflow:hidden; 清除浮动  父级加此属性
       问题 需要配合宽度或者zoom 兼容ie6 ie7
       overflow: scroll | auto | hidden;
       overflow:hidden; 溢出隐藏（裁刀！）
          
   BFC (block formatting context) 标准浏览器  块级元素格式化上下文
     a float的值不为none
     b overflow的值不为visible
     c display的值不为table-cell，table-caption，inline-block中的任何一个。
     d position的值不为relative和static；
     e width height min-width min-height: (!auto)
   
   hashlayout   ie浏览器
     a writing-mode: tb-rl
     b -ms-writing-mode: tb-rl
     c zoom: (!normal);
     
   触发这两个东西 会使此元素独立显示区域 不受外界因素影响
   
 定位  position
   相对定位 position： relative
     特征 a 不脱离文档流（元素移动后原始位置被保留）
          b 不影响元素本身的特征
          c 如果没有定位偏移量，对元素本身没有任何影响
          d 提升层级
          
     top right left  bottom  定位的偏移量
     
   绝对定位 position ：absolute
     特征  a  使元素脱离文档流
           b  使内嵌元素支持宽高
           c  块元素标签内容撑开高度
           d  如果有定位父级相对于定位父级发生偏移，没有定位父级则相对于document发生偏移
           e  相对定位一般都是配合绝对定位一块使用
           f 提升层级
           
    固定定位  position：fixed  
        与绝对定位的特征基本一致，的差别是始终相对整个文档进行定位
        问题  ie6不支持固定定位
        
    定位其他值
      position ：static； 默认值
      position ：inherit；从父元素继承定位元素的值（不兼容）
      
      position： relative  absolute  fixed  static inherit
      
    position：absolute； 绝对定位元素子级的浮动可以不用清除浮动方法
    position：fixed  固定定位元素子级的浮动可以不用写清除浮动方法
      ie不兼容
    
    标准下 opacity ： 0 ~ 1
    ie滤镜  filte：alpha(opacity=0~100) ie6 7
    
    z-index:[number];  定位层级
        a 定位元素默认后者层级高于前者；
        b 建议在兄弟标签之间比较层级
     
 问题
   <div class="div1">
     <div class="div2"></div>
   </div>
   <style>
     .div1{}
     .div2{width: 100px; height: 100px; position: absolute; top: 100px; left: 100px;}
   <style>
   
   问题一  子级脱离文档流
   问题二  子级无法撑起父级的高度
   
   解决  父级加上 position: relative;
         子级改为position: relative;
         
         <style>
            .div1{position: relative;}
            .div2{width: 100px; height: 100px; position: relative; top: 100px; left: 100px;}
         </style>
      这样可以解决子级有时候浮动的问题;  如果需要清除浮动 需用 .clearfix:after{content:'',display:block;clear:both;}
       
 
  兼容性问题
    1 html5标签的兼容
      解决  使用js  document.createElement("自定义标签名")  需加一个display：block
           引入js文件 <script src="js/html5shiv.js"></script>
    
    2 元素浮动之后，能设置宽度的话就给元素加宽度，如果需要宽度是内容撑开，就给它里面的块元素加上浮动
       解决 给子元素里面的块元素加上 float：left
       
    3 第一块元素浮动，第二块元素加margin值等于第一块，在ie6下会有间隙问题 
       解决 不这么写
            第二块元素去掉margin 加上float： left；
    
    4 ie6下子元素超出父级宽高，会把父级的宽度撑开
        不让子级宽度超出父级
    
    5 p包含块元素嵌套规则  td h 
       解决 不这么写
       
    6 margin兼容性问题
       1 margin-top传递
          解决 父级加上边框  ie6有问题
               触发bfc haslagout overflow：hidden  ie6有问题 ie下加zoom：1
               
       2 上下margin叠压
          尽量使用同一方向的margin 比如都设置top或者bottom
          
    7 diaplay inline-block
        问题 ie不支持
                解决   *display： inline ；*zoom： 1；
             换行被解析
    
    8 ie6最小高度  最下高度为19像素
        *overflow：hidden；
    
    9 ie6 7双边距
        margin-left：20px；float：left；  ie为双倍边距
        解决：*display： inline；
        
    10 li里面子元素都浮动li在ie6 7 下会从产生4px间隙问题
         解决  *vertical-align：top ； 上对齐
    
    11 浮动元素之间注释， 导致多复制一个文字问题
        两个浮动元素中间有注释或者内联元素并且和父级宽度相差不超过3px ie下文字溢出bug
        解决 1 两个浮动元素中间避免出现内联元素或者注释
             2 与父级宽度相差3px
        
    12 ie6 7父级元素的overflow：hidden 是包不住子级的relative
        解决 父级加上*position：relative；
    
    13 ie6 下绝对定位元素父级宽度是奇数，绝对定位元素的right和bottom值会有1px的偏差
        解决 避免父级宽高出现奇数
        
    14 ie6下绝对定位元素和浮动并列绝对定位元素消失
        不让他们在同一级下 后面并列的元素使用一个标签包住
    
    15 ie6下input的空隙
       input元素加上 *float：left；
   
    16 ie输入类型表单控件背景问题
        给input元素加上fixed  background：url('img/mail.jpg') no-repeat fixed;
        设置  background-attachment: fixed;
        
     css hack
      hack 修改的意思
        针对不同的浏览器写不同的css样式的过程  就叫css hack！
        \9 所有的ie10及以前
        + * ie7及以前的ie浏览器认识
        _ IE6及ie6的浏览器认识
    
    png24 图片格式 ie6不支持
      解决  js插件（问题，不能处理body之上png24）
            DD_belatedPNG.fix('xxx');
            
            原生滤镜
              _background-image:none;
              _filter:progid:DXImageTransform.Microsoft.AlphaImageLoader(src="xxx.png",sizeingMethod="crop");
    
    样式的优先级，提升样式优先级
     默认 < 类型 < class < id < style（行间） < !important
     
     !important 提升样式优先级权重
     
  
  属性选择器：  class选择 类属性选择  比如  .div1 
               id选择     比如   #div1  当前名字唯一性
               标签选择    比如  div
               群组选择器  如  div,p,span{}
               包含选择器  如  .box div{}
               通配符  *  找到页面上的所有的元素   body *{}  body下的所有子元素
               
               选择器的优先级
                 基础选择器优先级
                   style>id>clss>类型选择>标签选择器*
                   
                 包含选择器的优先级
                    
                 群组选择器的优先级
               
               选择属性名 p[]{}
                 属性值 p[miaov = leo]{}
                词列表 p[miao ~= leo]{}  包含value的  大多以空格隔开
                指定的属性名，并且有属性值，属性值是以value开头的 p[miao ^= leo]{}
                以value结束的  p[miao $= leo]{}
                包含value的   p[miao *= leo]{}
                带有包含指定值的 lang 属性的所有元素设置样式。适用于由连字符分隔的属性值 p[miao |= b-leo] 或 p[miao |= b] 	用于选取带有以
                指定值开头的属性值的元素，该值必须是整个单词。 指定了属性名是以value开头的或以value-开头的
                父元素的子元素  如  p > span{}
                
                结构性伪类
                 p:nth-child(1){}   p标签中的第一个p标签元素
                            odd   奇数行
                            even  偶数行
                      可计算  2n  n为0~无穷大的自然数
                  p:nth-child(2) 并且这儿元素必须是p标签  如果不是第二个不是p则找不到
                  body *:nth-child(2){}  body 下的第二个元素  body与*号之间必须用空格隔开
                  body *:nth-last-child(2){}  body下的倒数第二个元素
                  
                  p:nth-of-type(2){}  父级下的p标签下第二个p标签  p和冒号之间不能用空格隔开
                  body *: nth-of-type(2){} 找到body下的所有的标签的第二个标签
                  
                  body *:nth-last-of-type(2){} 找到body下的倒数第二个标签
                  
                  P:first-child{}  第一个p标签
                    last-child{}  最后一个 标签
                    first-of-child{} == nth-of-type(1)
                    last-of-child{}  == nth-last-of-child(1)
                    
                  p:empty 表示p元素中没有子节点  注意子节点包含文本节点
                  p:only-child  表示p元素中只有一个子节点  注意  子节点不包含文本节点
                    only-of-type  表示p的父元素中只有一个子节点，且这个唯一的子节点的类型必须是p
                                  注意  子节点不包含文本节点
                                  
                  如果需要选择紧接在另一个元素后的元素，而且二者有相同的父元素  li + li {}
                  这两组列表项不属于同一父元素（最多只能算堂兄弟)，用一个结合符只能选择两个相邻兄弟中的第二个元素 li + li{}
                  
                                  
                                  
    css选择器  伪类
      
     锚点href
    
     p:target 表示当前的URL片段的元素类型  这个元素必须是p
     disabled  不可编辑的属性
     E:disabled  表示不可点击的表单控件
     E:enabled   表示可点击的表单控件
     E:checked  表示已选中的checkbox或radio
     p~h1 p标签后面的h1标签
     
     p:first-line  表示p元素 第一行
     p:first-letter 表示p元素的第一个字符  此字符无法被选中 
     p::selection  表示p元素在用户选中文字时的背景
     p:before  生成内容在p元素之前
     p:after  生成内容在p元素之后
     
       content:"miao"  此属性添加内容
      
     p:not(.h2)  排除p标签下的h2的属性名的标签
      
颜色模式  rgba  红绿蓝  透明
   背景透明  文字不透明 
   问题  边框颜色透明有问题  可以看到背景
   
   透明度  opacity   file=alpha
   
   文字阴影  text-shadow: x y 模糊距离 颜色; 可叠加
   文字描边 -webkit-text-stroke: 宽度 颜色
   文字排版 direction  rtl 右对齐  需配合unicode-bidi：bidi-override 从左向右排 全兼容
   文字超出 white-space:nowrap   文字超出不换行
        overflow:hidden  超出隐藏
        text-overflow:  clip 无省略号  ellpsis 省略号  三个同时使用
        
   盒模型阴影
     box-shadow: [inset(内投影)] x y 模糊距离[扩展阴影半径]  颜色；可叠加  
     box-reflect  倒影  需加前缀
       direction  方向  above below  left  right  
       距离
       渐变(可选)  -wbkit-linear-gradient(right ,rgba(0,0,0,1) 0,rgba(0,0,0,0) 100%)
     
   缩放 resize
     both 水平垂直都可以缩放
     horizontal  只有水平方向可以缩放
     vertical  垂直可以拖着缩放
     注意一定要 配合overflow：auto;一块使用才有效果
     
  边框背景
    border-img:url();
    border-image-sourceg 引入图片
    border-imgage-slice  切割图片  不加px
    border-image-width 边框宽度
    border-imgage-repeat 图片的排列方式
        round 平铺  repeat重复  strrtch 拉伸
        
    border-colors  边框的颜色  只有火狐下实现
    
 背景
   多背景  逗号隔开
       background:url(a.jpg) 0 0,url(b.jpg) 0 100%;
       
   背景尺寸
      background-size:x y;
        background-size: 100% 100%;
           cover 放大  覆盖
           contain 缩小  包含
           
   背景的原点设置
     background-origin：border|padding|content
     border-box：从border区域开始显示背景
     padding-box  从padding区域开始显示背景
     content-box  从content区域开始显示背景
     
     background-clip:padidng-box;
     -webkit-background-clip:text  chorme下文本内容显示背景
   
   背景裁切
     background-clip:
     border: 从border区域向外裁剪背景
     padding  从padding区域向外裁剪背景
     content  从content区域向外裁剪背景
     no-clip 从border区域向外裁剪背景
     
  遮罩  -webkit-前缀
    mask-image
    mask-position
    mask-repeat
    
  -webkit-mask:url(mask.png) no-repeat;
 
自定义字体
  格式  @font-face{
           font-family:"miaov";
           src:url('111-webfont.eot');
           src:url('111-wenfont.eot?#iefix')format('embedded-opentype'),
               url('111-webfont.woff')format('woff'),
               url('111-webfont.ttf')format('truetype'),
               url('111-webfont.svg#untitledregular')format('svg');
           font-weight: normal;
           font-style: normal;
         }
         
    转换字体格式生成兼容性代码
      http://www.fontsquirrel.com/fontface/generator
   
 弹性盒模型
   注意在使用弹性和模型的时候 父元素必须要加display:box 或display:inline-box;要加浏览器内核前缀
   box-orient 定义盒模型的布局方向
     horizontal  水平显示
     vertical  垂直方向
   box-direction  元素排列顺序
     normal 正序
     Reverse 反序
   box-ordinal-group:2  设置元素的具体位置
     
   box-flex 定义盒子的弹性空间  要加浏览器的内核前缀
     子元素的尺寸 = 盒子的尺寸*子元素的box-flex属性值/所有子元素的box-flex属性值的和
     
   box-pack 对盒子富裕空间进行管理  水平方向
    star 所有子元素在盒子左侧显示，富裕空间在右侧
    end  所有的子元素在盒子的右侧显示，富裕空间在左侧
    center  所欲的子元素剧中
    justify  富裕空间在子元素之间平均分布 
   box-align   垂直方向 富裕空间管理
     star  所有的元素居上显示
     center  所有的子元素垂直居中
     end  所有的元素局下显示
     
  盒模型的怪异解析
    box-sizing：content-box  标准盒模型
       width/height = border + padding + content
             border-box  怪异盒模型  width/height = content
             
  css3分栏布局  要加-webkit-浏览器前缀
    column-width  栏目宽度
    column-count  栏目列数
    column-gap   栏目距离
    column-rule: 1px solid #000  栏目间隔线
    
  响应式布局
     <link rel="stylesheet" type="text/css" href="indexa.css" media="screen and (min-width:800px) and (max-width:1100px)">
     不兼容ie6，7，8
     
     横竖屏切换
       <link rel="stylesheet" media="all and (orientation:portrait)" href="portrait.css">
       <link rel="stylesheet" media="all and (orientation:landscape)" href="landscape.css">
      
      @media screen and (min-width:400px) and (max-width:500px){.box{margin: 0 auto;}}
      
      @import url("index.css") screen and (min-width:400px) and (max-width:800px);


ui样式
  圆角
   border-radius：
     一个值时候  四个角变化
     两个值的时候 第一个值对应左上和右下  第二个值对应 右上和左下
     三个值的时候 第一个值对应左上 第二个值对应右上和左下 第三个值对应右下
     四个值的时候  左上  右上  右下  左下 对应
  
    x/y 半径 椭圆的圆角  如 20px 30px 40px 60px/10px 20px 30px 40px  斜杠前面对应的x半径
            斜杠后面对应的有轴半径  分别对应每个角
            
    也可以是百分比的值

    
  线性渐变 要加浏览器的内核前缀
    -webkit-linear-gradint([起点|角度]？点，点...)
    只能用在背景上
      IE  filter：progid:DXImageTransform.Microsoft.gradient(startColorstr='#ffffff',endColorstr='#ff0000',GradientType='1'); 
    参数
      起点：从什么方向开始渐变  默认top
               left ， top ， left top
      角度：从什么角度开始渐变
        xxx deg的形式
      点 渐变点的颜色和位置
        black  50%  ,位置可选
        
     repeating-linear-gradient  自己设置的颜色渐变平铺
      
  径向渐变  
    radial-gradient([起点]？[形状||大小,]?点,点...)
    起点  可以是关键字（left top right bottom） 具体数值或百分比
    形状  ellipse椭圆  circle圆
    大小  具体数值或百分比，也可以是关键字（最近端，最近角，最远端，最远角，包含或覆盖（closest-side，closest-corner，farthest-side，
    farthest-corner,contain or cover））;
      注意firefox目前只支持关键字
            
taansition 过度
    transition-property 要运动的样式  all  attr  none
    transition-duration  运动的时间
    transition-delay  延时时间
    transition-timing-function 运动的形式
      ease  逐渐变慢 默认值
      linear 匀速
      ease-in 加速
      ease-out减速
      ease-in-out 先加速后减速
      cubic-bezier 贝塞尔曲线 （x1,y1,x2,y2） http://matthewlein.com/ceaser

过度完成事件
 webkit内核
 obj.addEventListener('webkitTransitionEnd',function(){}.false)
 firefox
 obj.addEventListener('transitionend',function(){},false);

2d变换
  transform
    rotate()  旋转函数  取整数值
        deg  度数
        transform-origin 旋转的基点
    skew()  倾斜函数 取整数值
        skewX()
        skewy()
    scale()  缩放函数  取值 整数 小数
        scaleX()
        scaleY()
    translate()  位移函数
      translateX();
      translateY()
        
        transform: translateX(100px) scale(0.5); 
        transform: scale(0.5) translateX(100px);  这两个代码会有执行顺序 后写的先执行  所以第二个100px 会被缩短0.5倍
        
        隐患
        
        top/left是布局类的样式，这个样式的变化会导致重排（reflow/relayout），所谓重排即指对这些节点以及受这些节点影响的
        其它节点，进行CSS计算->布局->重绘过程，这个过程的前2步是消耗大量资源的
        left/top/margin 之类的属性会影响到元素在文档中的布局，当对布局（layout）进行动画时，该元素的布局改变可能会影响到
        其他元素在文档中的位置，就导致了所有被影响到的元素都要进行重新布局[1]，浏览器需要为整个层进行重绘并重新上传到 GPU，
        造成了极大的性能开销。
        
        translate是一个绘制样式（这名词我瞎编的），这个样式的变化会导致重绘（repaint），即在屏幕上重新画一下，不会进行CSS
        计算和布局这2个性能大户，所以我们认为translate性能上要明显好于top/left
        transform 属于合成属性（composite property），对合成属性进行 transition/animation 动画将会创建一个合成层
        （composite layer），这使得被动画元素在一个独立的层中进行动画。通常情况下，浏览器会将一个层的内容先绘制进一个
        位图中，然后再作为纹理（texture）上传到 GPU，只要该层的内容不发生改变，就没必要进行重绘（repaint），浏览器会通
        过重新复合（recomposite）来形成一个新的帧[2]。

        translate3D传说因为走的是3D，所以能得到更完整的GPU加速的支持，在GPU中还有贴图缓存等手段帮你优化性能，所以更快

     matrix(a,b,c,d,e,f)矩阵函数  matrix(1,0,0,1,0,0)
       
       通过矩阵实现旋转
         a=Math.cos(deg/180*Math.PI);
         b=Math.sin(deg/180*Math.PI);
         c=-Math.sin(deg/180*Math.PI);
         d=Math.cos(deg/180*Math.PI);
         
           ie下有旋转基点的问题
            obj.style.left = (obj.parentNode.offsetWidth-obj.offsetWidth)/2+'px'
            obj.style.top = (obj.parentNode.offsetHeight-obj.offsetHeight)/2+'px';
           
        通过矩阵实现缩放
          x轴缩放  a=x*a c=x*c e=x*e
          y轴缩放  b=y*b d=y*d f=y*f
        通过矩阵实现位移
          x轴位移  e=e+x
          y轴位移  f=f+y
        通过矩阵实现倾斜
          x轴倾斜  c=Math.tan(xdeg/180*Math.PI)
          y轴倾斜  c=Math.tan(xdeg/180*Math.PI)
       
       ie下兼容 
         filter：
           progid:DXImageTransform.Microsoft.Matrix(M11=1,M12=0,M21=0,M22=0,SizingMethod='auto expand')
             M11 == a M12 == c M21 == b M22 == d
             
     3d  变换  需加前缀
       tranform-style(preserve-3d)  建立3d空间  父级加3d空间
       perspective: 800px  景深  父级加景深
       perspective-origin  景深基点  站在哪个位置看此元素
       backface-visibility 隐藏背面
       transform  新增函数
         rotateX()  水平旋转
         rotateY()  垂直旋转
         rotateZ()   z轴旋转
         translateZ()  前后位移
         scaleZ()  厚度
         
      animation  动画  内核前缀
        关键帧 keyFrames
         类似于flash
           只需指明两个状态，之间的过程由计算机自动计算
         关键帧的事件单位
           数字  0% 25% 100%等
           字符  form(0%) to(100%)
         格式
           @keyframes 动画名称
           {
             动画的状态
           }
           
         调用的标签
           写法 animation：时间 延时时间 动画名称 运动形式 运动次数
            animation-name  动画名称（关键帧名称）
            animation-duration  动画持续时间
            
           animation-play-state 播放状态(running 播放和paused 暂停)
           
         可选属性
           animation-timing-function  动画运动形式
            linear 匀速
            ease   缓冲
            ease-in  有快到慢
            ease-out  由慢到快
            ease-in-out  由慢到快在到慢
            cubic-bezier(number,number,number,number.number)
               特定的贝塞尔曲线类型  四个数值须在[0,1]区间内
           
            animation-delay  动画延时
              只是第一次
            animation-iteration-count  重复次数
              infinite为无限次
            animation-direction  播放前重置
               动画是否重置后在开始播放
               alternate  动画直接重上一次停止的位置的倒序开始执行
               normal  动画第二次直接跳动0%的状态开始执行
               
             无法在目标点停下来
                解决  设置一个.move{-webkit-animation:2s move; width:500px}
                      用js添加此属性
                      
                无法动态改变目标点位置
                
              chorme下  obj.addEventListener('webkitAnimationEnd',function(){},false)
              火狐下   obj.addeventListener('animationend',function(){}.false)
              
     
                  
                                  
                  
    
  
  
  
  
    
    
                  
