css
  概念： 层叠样式表，用来表现html或xhtml文件样式计算机语言。
  
  属性选择器：  class选择  比如  .div1 
               id选择     比如   #div1
               标签选择    比如  div
               组合选择
               通配符  *
               
               选择属性名 p[]{}
                 属性值 p[miaov = leo]{}
                词列表 p[miao ~= leo]{}  包含value的  大多以空格隔开
                指定的属性名，并且有属性值，属性值是以value开头的 p[miao ^= leo]{}
                以value结束的  p[miao $= leo]{}
                包含value的   p[miao *= leo]{}
                带有包含指定值的 lang 属性的所有元素设置样式。适用于由连字符分隔的属性值 p[miao |= b-leo] 或 p[miao |= b] 	用于选取带有以
                指定值开头的属性值的元素，该值必须是整个单词。 指定了属性名是以value开头的或以value-开头的
                父元素的子元素  如  p > span{}
                
                结构性伪类
                 p:nth-child(1){}   p标签中的第一个p标签元素
                            odd   奇数行
                            even  偶数行
                      可计算  2n  n为0~无穷大的自然数
                  p:nth-child(2) 并且这儿元素必须是p标签  如果不是第二个不是p则找不到
                  body *:nth-child(2){}  body 下的第二个元素  body与*号之间必须用空格隔开
                  body *:nth-last-child(2){}  body下的倒数第二个元素
                  
                  p:nth-of-type(2){}  父级下的p标签下第二个p标签  p和冒号之间不能用空格隔开
                  body *: nth-of-type(2){} 找到body下的所有的标签的第二个标签
                  
                  body *:nth-last-of-type(2){} 找到body下的倒数第二个标签
                  
                  P:first-child{}  第一个p标签
                    last-child{}  最后一个 标签
                    first-of-child{} == nth-of-type(1)
                    last-of-child{}  == nth-last-of-child(1)
                    
                  p:empty 表示p元素中没有子节点  注意子节点包含文本节点
                  p:only-child  表示p元素中只有一个子节点  注意  子节点不包含文本节点
                    only-of-type  表示p的父元素中只有一个子节点，且这个唯一的子节点的类型必须是p
                                  注意  子节点不包含文本节点
                                  
                  如果需要选择紧接在另一个元素后的元素，而且二者有相同的父元素  li + li {}
                  这两组列表项不属于同一父元素（最多只能算堂兄弟)，用一个结合符只能选择两个相邻兄弟中的第二个元素 li + li{}
                  
                                  
                                  
    css选择器  伪类
      
     锚点href
    
     p:target 表示当前的URL片段的元素类型  这个元素必须是p
     disabled  不可编辑的属性
     p:disabled  表示不可点击的表单控件
     p:enabled   表示可点击的表单控件
     p:checked  表示已选中的checkbox或radio
     p~h1 p标签后面的h1标签
     
     p:first-line  表示p元素 第一行
     p:first-letter 表示p元素的第一个字符  此字符无法被选中 
     p::selection  表示p元素在用户选中文字时的背景
     p:before  生成内容在p元素之前
     p:after  生成内容在p元素之后
     
       content:"miao"  此属性添加内容
      
     p:not(.h2)  排除p标签下的h2的属性名的标签
      
颜色模式  rgba  红绿蓝  透明
   背景透明  文字不透明 
   问题  边框颜色透明有问题  可以看到背景
   
   透明度  opacity   file=alpha
   
   文字阴影  text-shadow: x y 模糊距离 颜色; 可叠加
   文字描边 -webkit-text-stroke: 宽度 颜色
   文字排版 direction  rtl 右对齐  需配合unicode-bidi：bidi-override 从左向右排 全兼容
   文字超出 white-space:nowrap   文字超出不换行
        overflow:hidden  超出隐藏
        text-overflow:  clip 无省略号  ellpsis 省略号  三个同时使用
        
   盒模型阴影
     box-shadow: [inset(内投影)] x y 模糊距离[扩展阴影半径]  颜色；可叠加  
     box-reflect  倒影  需加前缀
       direction  方向  above below  left  right  
       距离
       渐变(可选)  -wbkit-linear-gradient(right ,rgba(0,0,0,1) 0,rgba(0,0,0,0) 100%)
     
   缩放 resize
     both 水平垂直都可以缩放
     horizontal  只有水平方向可以缩放
     vertical  垂直可以拖着缩放
     注意一定要 配合overflow：auto;一块使用才有效果
     
  边框背景
    border-img:url();
    border-image-sourceg 引入图片
    border-imgage-slice  切割图片  不加px
    border-image-width 边框宽度
    border-imgage-repeat 图片的排列方式
        round 平铺  repeat重复  strrtch 拉伸
        
    border-colors  边框的颜色  只有火狐下实现
    
 背景
   多背景  逗号隔开
       background:url(a.jpg) 0 0,url(b.jpg) 0 100%;
       
   背景尺寸
      background-size:x y;
        background-size: 100% 100%;
           cover 放大  覆盖
           contain 缩小  包含
           
   背景的原点设置
     background-origin：border|padding|content
     border-box：从border区域开始显示背景
     padding-box  从padding区域开始显示背景
     content-box  从content区域开始显示背景
     
     background-clip:padidng-box;
     -webkit-background-clip:text  chorme下文本内容显示背景
   
   背景裁切
     background-clip:
     border: 从border区域向外裁剪背景
     padding  从padding区域向外裁剪背景
     content  从content区域向外裁剪背景
     no-clip 从border区域向外裁剪背景
     
  遮罩  -webkit-前缀
    mask-image
    mask-position
    mask-repeat
    
  -webkit-mask:url(mask.png) no-repeat;
 
自定义字体
  格式  @font-face{
           font-family:"miaov";
           src:url('111-webfont.eot');
           src:url('111-wenfont.eot?#iefix')format('embedded-opentype'),
               url('111-webfont.woff')format('woff'),
               url('111-webfont.ttf')format('truetype'),
               url('111-webfont.svg#untitledregular')format('svg');
           font-weight: normal;
           font-style: normal;
         }
         
    转换字体格式生成兼容性代码
      http://www.fontsquirrel.com/fontface/generator
   
 弹性盒模型
   注意在使用弹性和模型的时候 父元素必须要加display:box 或display:inline-box;要加浏览器内核前缀
   box-orient 定义盒模型的布局方向
     horizontal  水平显示
     vertical  垂直方向
   box-direction  元素排列顺序
     normal 正序
     Reverse 反序
   box-ordinal-group:2  设置元素的具体位置
     
   box-flex 定义盒子的弹性空间  要加浏览器的内核前缀
     子元素的尺寸 = 盒子的尺寸*子元素的box-flex属性值/所有子元素的box-flex属性值的和
     
   box-pack 对盒子富裕空间进行管理  水平方向
    star 所有子元素在盒子左侧显示，富裕空间在右侧
    end  所有的子元素在盒子的右侧显示，富裕空间在左侧
    center  所欲的子元素剧中
    justify  富裕空间在子元素之间平均分布 
   box-align   垂直方向 富裕空间管理
     star  所有的元素居上显示
     center  所有的子元素垂直居中
     end  所有的元素局下显示
     
  盒模型的怪异解析
    box-sizing：content-box  标准盒模型
       width/height = border + padding + content
             border-box  怪异盒模型  width/height = content
             
  css3分栏布局  要加-webkit-浏览器前缀
    column-width  栏目宽度
    column-count  栏目列数
    column-gap   栏目距离
    column-rule: 1px solid #000  栏目间隔线
    
  响应式布局
     <link rel="stylesheet" type="text/css" href="indexa.css" media="screen and (min-width:800px) and (max-width:1100px)">
     不兼容ie6，7，8
     
     横竖屏切换
       <link rel="stylesheet" media="all and (orientation:portrait)" href="portrait.css">
       <link rel="stylesheet" media="all and (orientation:landscape)" href="landscape.css">
      
      @media screen and (min-width:400px) and (max-width:500px){.box{margin: 0 auto;}}
      
      @import url("index.css") screen and (min-width:400px) and (max-width:800px);


ui样式
  圆角
   border-radius：
     一个值时候  四个角变化
     两个值的时候 第一个值对应左上和右下  第二个值对应 右上和左下
     三个值的时候 第一个值对应左上 第二个值对应右上和左下 第三个值对应右下
     四个值的时候  左上  右上  右下  左下 对应
  
    x/y 半径 椭圆的圆角  如 20px 30px 40px 60px/10px 20px 30px 40px  斜杠前面对应的x半径
            斜杠后面对应的有轴半径  分别对应每个角
            
    也可以是百分比的值

    
  线性渐变 要加浏览器的内核前缀
    -webkit-linear-gradint([起点|角度]？点，点...)
    只能用在背景上
      IE  filter：progid:DXImageTransform.Microsoft.gradient(startColorstr='#ffffff',endColorstr='#ff0000',GradientType='1'); 
    参数
      起点：从什么方向开始渐变  默认top
               left ， top ， left top
      角度：从什么角度开始渐变
        xxx deg的形式
      点 渐变点的颜色和位置
        black  50%  ,位置可选
        
     repeating-linear-gradient  自己设置的颜色渐变平铺
      
  径向渐变  
    radial-gradient([起点]？[形状||大小,]?点,点...)
    起点  可以是关键字（left top right bottom） 具体数值或百分比
    形状  ellipse椭圆  circle圆
    大小  具体数值或百分比，也可以是关键字（最近端，最近角，最远端，最远角，包含或覆盖（closest-side，closest-corner，farthest-side，
    farthest-corner,contain or cover））;
      注意firefox目前只支持关键字
            
taansition 过度
    transition-property 要运动的样式  all  attr  none
    transition-duration  运动的时间
    transition-delay  延时时间
    transition-timing-function 运动的形式
      ease  逐渐变慢 默认值
      linear 匀速
      ease-in 加速
      ease-out减速
      ease-in-out 先加速后减速
      cubic-bezier 贝塞尔曲线 （x1,y1,x2,y2） http://matthewlein.com/ceaser

过度完成事件
 webkit内核
 obj.addEventListener('webkitTransitionEnd',function(){}.false)
 firefox
 obj.addEventListener('transitionend',function(){},false);

2d变换
  transform
    rotate()  旋转函数  取整数值
        deg  度数
        transform-origin 旋转的基点
    skew()  倾斜函数 取整数值
        skewX()
        skewy()
    scale()  缩放函数  取值 整数 小数
        scaleX()
        scaleY()
    translate()  位移函数
      translateX();
      translateY()
        
        transform: translateX(100px) scale(0.5); 
        transform: scale(0.5) translateX(100px);  这两个代码会有执行顺序 后写的先执行  所以第二个100px 会被缩短0.5倍
        
        隐患
        
        top/left是布局类的样式，这个样式的变化会导致重排（reflow/relayout），所谓重排即指对这些节点以及受这些节点影响的
        其它节点，进行CSS计算->布局->重绘过程，这个过程的前2步是消耗大量资源的
        left/top/margin 之类的属性会影响到元素在文档中的布局，当对布局（layout）进行动画时，该元素的布局改变可能会影响到
        其他元素在文档中的位置，就导致了所有被影响到的元素都要进行重新布局[1]，浏览器需要为整个层进行重绘并重新上传到 GPU，
        造成了极大的性能开销。
        
        translate是一个绘制样式（这名词我瞎编的），这个样式的变化会导致重绘（repaint），即在屏幕上重新画一下，不会进行CSS
        计算和布局这2个性能大户，所以我们认为translate性能上要明显好于top/left
        transform 属于合成属性（composite property），对合成属性进行 transition/animation 动画将会创建一个合成层
        （composite layer），这使得被动画元素在一个独立的层中进行动画。通常情况下，浏览器会将一个层的内容先绘制进一个
        位图中，然后再作为纹理（texture）上传到 GPU，只要该层的内容不发生改变，就没必要进行重绘（repaint），浏览器会通
        过重新复合（recomposite）来形成一个新的帧[2]。

        translate3D传说因为走的是3D，所以能得到更完整的GPU加速的支持，在GPU中还有贴图缓存等手段帮你优化性能，所以更快

     matrix(a,b,c,d,e,f)矩阵函数  matrix(1,0,0,1,0,0)
       
       通过矩阵实现旋转
         a=Math.cos(deg/180*Math.PI);
         b=Math.sin(deg/180*Math.PI);
         c=-Math.sin(deg/180*Math.PI);
         d=Math.cos(deg/180*Math.PI);
         
           ie下有旋转基点的问题
            obj.style.left = (obj.parentNode.offsetWidth-obj.offsetWidth)/2+'px'
            obj.style.top = (obj.parentNode.offsetHeight-obj.offsetHeight)/2+'px';
           
        通过矩阵实现缩放
          x轴缩放  a=x*a c=x*c e=x*e
          y轴缩放  b=y*b d=y*d f=y*f
        通过矩阵实现位移
          x轴位移  e=e+x
          y轴位移  f=f+y
        通过矩阵实现倾斜
          x轴倾斜  c=Math.tan(xdeg/180*Math.PI)
          y轴倾斜  c=Math.tan(xdeg/180*Math.PI)
       
       ie下兼容 
         filter：
           progid:DXImageTransform.Microsoft.Matrix(M11=1,M12=0,M21=0,M22=0,SizingMethod='auto expand')
             M11 == a M12 == c M21 == b M22 == d
             
     3d  变换  需加前缀
       tranform-style(preserve-3d)  建立3d空间  父级加3d空间
       perspective: 800px  景深  父级加景深
       perspective-origin  景深基点  站在哪个位置看此元素
       backface-visibility 隐藏背面
       transform  新增函数
         rotateX()  水平旋转
         rotateY()  垂直旋转
         rotateZ()   z轴旋转
         translateZ()  前后位移
         scaleZ()  厚度
         
      animation  动画  内核前缀
        关键帧 keyFrames
         类似于flash
           只需指明两个状态，之间的过程由计算机自动计算
         关键帧的事件单位
           数字  0% 25% 100%等
           字符  form(0%) to(100%)
         格式
           @keyframes 动画名称
           {
             动画的状态
           }
           
         调用的标签
           写法 animation：时间 延时时间 动画名称 运动形式 运动次数
            animation-name  动画名称（关键帧名称）
            animation-duration  动画持续时间
            
           animation-play-state 播放状态(running 播放和paused 暂停)
           
         可选属性
           animation-timing-function  动画运动形式
            linear 匀速
            ease   缓冲
            ease-in  有快到慢
            ease-out  由慢到快
            ease-in-out  由慢到快在到慢
            cubic-bezier(number,number,number,number.number)
               特定的贝塞尔曲线类型  四个数值须在[0,1]区间内
           
            animation-delay  动画延时
              只是第一次
            animation-iteration-count  重复次数
              infinite为无限次
            animation-direction  播放前重置
               动画是否重置后在开始播放
               alternate  动画直接重上一次停止的位置的倒序开始执行
               normal  动画第二次直接跳动0%的状态开始执行
               
             无法在目标点停下来
                解决  设置一个.move{-webkit-animation:2s move; width:500px}
                      用js添加此属性
                      
                无法动态改变目标点位置
                
              chorme下  obj.addEventListener('webkitAnimationEnd',function(){},false)
              火狐下   obj.addeventListener('animationend',function(){}.false)
              
     
                  
                                  
                  
    
  
  
  
  
    
    
                  
